 modul parser ( substr  prefix  parse_al  toolow  delete_punctuation_mark  parsechar ) where import nlp.snowbal import qualifi data.text as t import data.text.io as tio import data.char import system.directori import data.list import control.except parsechar : string  string parsechar s  email `elem` s = "email"  percent `elem` s = "percent"  prelude.ani isdigit s = "number"  dollar `elem` s = "dollar"  substr URL s = "url"   `elem` s = ""   `elem` s = ""   `elem` s = ""  otherwis = s delete_punctuation_mark : string  string delete_punctuation_mark s  last s == . = revers (delet (last s) (revers s))  last s == ; = revers (delet (last s) (revers s))  last s == , = revers (delet (last s) (revers s))  last s == : = revers (delet (last s) (revers s))  last s == ! = revers (delet (last s) (revers s))  last s == ? = revers (delet (last s) (revers s))  otherwis = s substr : string  string  bool substr (x:xs) [] = fals substr xs ys  prefix xs ys = true  substr xs (tail ys) = true  otherwis = fals prefix : string  string  bool prefix [] ys = true prefix (x:xs) [] = fals prefix (x:xs) (y:ys) = (x == y) && prefix xs ys toolow : string  string toolow "" = [] toolow a = (tolow (head a) )  (toolow (tail a)) pars s = do number  prelude.readfil s let number = prelude.word number let wss = fmap toolow number let ws = fmap delete_punctuation_mark wss let number = fmap parsechar ws let number = fmap (t.pack) number let number = fmap (stem english) number let number = fmap (t.append (t.pack " ")) number tio.writefil (s++"_parsed") number t.append number return () parsecatch s = catch (pars s) handler where handler : someexcept  io () handler ex = prelude.putstrln dollar "caught except " ++ show ex repeatntim number _ _ = return () repeatntim n action (x:xs) = do action x repeatntim number action xs deleteunpars file = do repeatntim (length files) removefil file deleteempti s = do fcontent  prelude.readfil s if ((length fcontents) == number then do removefil s els return () return () deleteallempti = do file  system.directory.getdirectorycont  system.directory.getcurrentdirectori let onlyfil = delet "." dollar delet ".." file repeatntim (length onlyfiles) deleteempti onlyfil return () parse_al = do file  system.directory.getdirectorycont  system.directory.getcurrentdirectori let onlyfil = delet "." dollar delet ".." file repeatntim (length onlyfiles) parsecatch onlyfil deleteunpars onlyfil deleteallempti return number