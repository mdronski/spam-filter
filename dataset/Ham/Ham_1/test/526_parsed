 from email tue aug number number number return-path email delivered-to email receiv from localhost (localhost number by phobos.labs.netnoteinc.com (postfix) with esmtp id number for email tue number aug number number number (edt) receiv from phobo number by localhost with imap number for email (single-drop) tue number aug number number number (ist) receiv from lugh.tuatha.org email number by dogma.slashnull.org number with esmtp id number for email sun number aug number number number receiv from lugh email number by lugh.tuatha.org number with esmtp id number sun number aug number number number receiv from number number number by lugh.tuatha.org number with esmtp id number for email sun number aug number number number x-authentication-warn lugh.tuatha.org host number number claim to be number receiv from number number by number number id number for email sun number aug number number number receiv from bolsh.wanadoo.fr number by number number id number for email sun number aug number number number receiv from dave by bolsh.wanadoo.fr with local (exim number number (debian)) id number for email sun number aug number number number date sun number aug number number number from david neari email to ilug email subject re [ilug] one command -- four type message-id email refer email mime-vers number content-typ text/plain number content-disposit inlin in-reply-to email user-ag number sender email errors-to email x-mailman-vers number preced bulk list-id irish linux user group  x-beenther email solocdm wrote  how are there four (/bin/dnsdomainnam /bin/domainnam  /bin/nisdomainnam /bin/ypdomainname) differ type of hostnam  link with their own separ option the program has differ behaviour depend on the valu of number probably.. here a simpl example.. #includ  #includ  #includ  long int add(long int a long int b) { return a+b } long int subtract(long int a long int b) { return a-b } int main(int argc char **argv) { long int a b /* operand */ long int (*operation)(long int a long int b) char *prognam *marker if(argc != number { fprintf(stderr "usag percent number number number number } prognam = number /') if(prognam == null) prognam = number els prognam ++ /* skip past the / */ if(strcmp(prognam "add") == number { oper = add } els if (strcmp(prognam subtract) == number { oper = subtract } els { fprintf(stderr "program call with invalid " "name percent quitting.\n" number number } a = number &marker number /* use base number for arg * start number and base number for * arg start number */ if(*mark != number { fprintf(stderr "invalid charact percent in argument percent *marker number number } b = number &marker number /* use base number for arg * start number and base number for * arg start number */ if(*mark != number { fprintf(stderr "invalid charact percent in argument percent *marker number number } percent percent percent = percent a (oper == add)?'+':'- b operation(a b)) return number } say that in operation.c compil it use gcc -ansi -pedant -wall -w number -o add operation.c and then ln add subtract and run both with appropri argument -- david neari marseill franc e-mail email -- irish linux user group email URL for (un)subscript inform list maintain email