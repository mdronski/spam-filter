 return-path email delivery-d sat jul number number number return-path email receiv from lugh.tuatha.org email number by dogma.slashnull.org number with esmtp id number for email sat number jul number number number receiv from lugh email number by lugh.tuatha.org number with esmtp id number sat number jul number number number x-authentication-warn lugh.tuatha.org host email number claim to be lugh receiv from number number number by lugh.tuatha.org number with smtp id number for email sat number jul number number number message-id email receiv (qmail number messnum number invok from number number jul number number number receiv from number (helo there) number by number (qp number with smtp number jul number number number content-typ text/plain number from john gay email to kevin lyda email subject re [ilug] optim for pentium number date sat number jul number number number x-mailer kmail [version number refer email email in-reply-to email cc email mime-vers number content-transfer-encod number sender email errors-to email x-mailman-vers number preced bulk list-id irish linux user group  x-beenther email on sat number jul number number you wrote  on fri jul number number at number number john gay wrote   a while ago i ask what other packag i should optom for pentium   one person answer glibc this got me think about gcc itself so i   ask on anoth list and got a few answer most were "don't even think   about it" but a few suggest gcc and one point me to linux from   scratch   whi   or more specif what do you mean on one hand you can optimis  how gcc is compil all that will do is make it generat the exact  same code just a smidg faster and sinc gcc is such a memori pig  you'd do better to buy more ram to up your fs cach hit and to keep  gcc heap out of swap  to explain what i mean accord to the pgcc site gcc by itself is not veri good at take advantag of the pipelin featur introduc with the pentium famili the pgcc patch are suppos to make gcc generat tighter code but your point about compil bug is well taken this is whi i am take thing slow and look into these thing as isaid the pgcc site doe not seem to have been updat in at least a year or more?! i am also look into gcc itself now that the number seri is out it might be better than when the pgcc patch were written the bottom line is pentium have better instruct set than the origin number instruct that they still support the pentium also start introduc pipelin so proper generat code can be upto percent faster than equivul code that perform the same function as for whi optimis gcc if it will onli produc that same code onli slight faster the speed is base on a percentag of the total compil time the first time i compil the qt lib with onli number and a lot of swap it took over number hour i'v now got number in the box but at number ani increas distribut over such a long compil is still consider  on the other side you can look into patch to gcc that affect it  code generat um ok but keep in mind that compil error suck  i can't express that enough compil should just work perfect  alway do anyth that might affect that is in my opinion insan  they'r hard to trace and you'd better have a deep knowledg of what  go on to either report bug to the patch develop or to fix it  yourself plus my understand is that gcc would need major chang  to get larg speed boost on number chip  my understand and i'v follow the develop of the intel famili sinc the number each generat sinc the number has introduc better and faster instruct i.e. the number introduc i.e.e. float point instruct by incorpor an fpu on board the first few generat were flaki so intel disabl the dodgi one and sold then as number i.e without the fpu later generat were better this is whi you onli find slow number ;-) therefor number with work fpu can calcul float faster than number but you must generat the proper code to take advantag of this the pentium improv the fpu logic and introduc pipelin the first generat of pentium had faulti fpu logic program into them the pentium bug but subsequ one were fine these ad instruct are faster again then the number equivul also the pipelin need care instruct order to take full advantag of it speed improv again someth the compil must know about to utilis to full effect accord the the pgcc site gcc doe this poor but that info seem to be date number might be better this is one of the area i am research close to get an answer mmx ad the abil to perform matrix calcul on int with singl instruct and use special dma featur within the pentium to speed this up two problem with this number int are not veri use for most matrix calcul float would be better number this is not someth that can be optimis well by a compil it need to be identifi and provid for in the sourc i.e not much use to anyon but make great ad copi ;-) the pentiumpro improv the pipelin enorm again a proper written compil should be abl to optimis for this onc it can organis the code proper the piii ad mmx-type instruct for float now this is use graphic-intens program can take great advantag of this but it must be provid for in the sourc code compil can not usual optimis for this sort of thing number and dri are two prime exampl that do provid for this so the piii can run number and dri quit a bit faster if it compil for these sse instruct not sure what improv the number introduc i think it most just speed improv rather than ani execut chang so the differ between the number and the pentiummmx should yield a signific speed boost if optimis correct there are faster float point instruct and pipelin that need optimis for i'm not sure if gcc can optimis proper for the pipelin at least the pgcc group found signific improv to add to number to gain speed improv of upto percent percent of number hour is number hour of cours none of this will have ani effect on o/i bound process but gui are most cpu bound i am also find out about object pre-link optimis which should give even better perform for qt and kde now if i had anoth piii for my box i could take advantag of those sse instruct to optimis number as well  kevin an of cours i'v load of time on my hand now and i need someth to keep me busi at least i can say that i'v sucess built a full linux system includ number from scratch when i'm done ;-) cheer john gay -- irish linux user group email URL for (un)subscript inform list maintain email