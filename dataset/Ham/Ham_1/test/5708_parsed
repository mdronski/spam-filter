   i'm read this now as that you train on about number spam and   about number ham that less than percent of the size of the   train set i'v been use pleas tri an experi train   on number of each and test onc against the other number of each [jeremy]  this help a lot possibl i check in a chang to classifier.pi overnight (get rid of mincount) that gave a major improv in the f-n rate too independ of token  here are result with the stock token unsur what "stock tokenizer" mean to you for exampl it might mean tokenizer.token or mboxtest.mytokenizer.token  train on  /home/jeremy/mail/inbox number &   /home/jeremy/mail/spam number  .. number ham & number spam  number number  number number  number number  train on  /home/jeremy/mail/inbox number &   /home/jeremy/mail/spam number  .. number ham & number spam  number number  number number  number number  train on  /home/jeremy/mail/inbox number &   /home/jeremy/mail/spam number  .. number ham & number spam  number number  number number  number number  train on  /home/jeremy/mail/inbox number &   /home/jeremy/mail/spam number  .. number ham & number spam  number number  number number  number number  total fals pos number number  total fals neg number number note that those rate remain much higher than i got use just number of ham and number of spam that remain a mysteri  and result from the token that look at all header except date  receiv and x-from_ unsur what that mean too for exampl "look at" might mean you enabl anthoni count-them gimmick and/or that you'r token them yourself and/or ...  train on  /home/jeremy/mail/inbox number &   /home/jeremy/mail/spam number  .. number ham & number spam  number number  number number  number number  train on  /home/jeremy/mail/inbox number &   /home/jeremy/mail/spam number  .. number ham & number spam  number number  number number  number number  train on  /home/jeremy/mail/inbox number &   /home/jeremy/mail/spam number  .. number ham & number spam  number number  number number  number number  train on  /home/jeremy/mail/inbox number &   /home/jeremy/mail/spam number  .. number ham & number spam  number number  number number  number number  total fals pos number number  total fals neg number number   is it safe to conclud that avoid ani clever with header is a  good thing sinc i don't know what you did exact i can't guess what you seem to show is that you did *something* clever with header and that do so help (the "after" number are better than the "before" number right?) assum that what you did was overrid what now tokenizer.tokenizer.tokenize_head with some other routin and didn't call the base tokenizer.tokenize_head at all then you'r miss care test treatment of just a few header field but ad mani dozen of other header field there no question that ad more header field should help tokenizer.tokenizer.tokenize_head doesn't do so onli becaus my test corpora are such that i can't add more header without get major benefit for bogus reason apart from all that you said you'r skip receiv by sever account that may be the most valuabl of all the header field i'm (mean tokenizer.tokenizer.tokenize_headers) skip them too for the reason explain abov offlin a week or two ago neil schemenau report good result from this scheme ip_r = number for header in msg.get_all("received" ()) for ip in ip_re.findall(header) part = ip.split(".") for n in number number yield received: + .'.join(parts[:n]) this make a lot of sens to me i just check it in but left it disabl for now