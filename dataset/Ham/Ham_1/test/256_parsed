 from email mon jul number number number return-path email delivered-to email receiv from localhost (localhost number by phobos.labs.netnoteinc.com (postfix) with esmtp id number for email mon number jul number number number (edt) receiv from phobo number by localhost with imap number for email (single-drop) mon number jul number number number (ist) receiv from lugh.tuatha.org email number by dogma.slashnull.org number with esmtp id number for email sat number jul number number number receiv from lugh email number by lugh.tuatha.org number with esmtp id number sat number jul number number number x-authentication-warn lugh.tuatha.org host email number claim to be lugh receiv from number number number by lugh.tuatha.org number with smtp id number for email sat number jul number number number receiv (qmail number messnum number invok from number number jul number number number receiv from unknown (helo pc) number by number (qp number with smtp number jul number number number from "john moran" email to "ilug" email subject re [ilug] optim for pentium number date sat number jul number number number message-id email x-prioriti number (normal) x-msmail-prior normal x-mailer microsoft outlook build number import normal in-reply-to email x-mimeol produc by microsoft mimeol number sender email errors-to email x-mailman-vers number preced bulk list-id irish linux user group  x-beenther email gcc glibc and binutil which the lfs site say not to optimis alreadi determin what system you'r compil on and optimis itself to that that my understand of how it work anyway john subject re [ilug] optim for pentium number on fri jul number number at number number john gay wrote  a while ago i ask what other packag i should optom for pentium  one  person answer glibc this got me think about gcc itself so i ask on  anoth list and got a few answer most were "don't even think about it" but  a few suggest gcc and one point me to linux from scratch whi or more specif what do you mean on one hand you can optimis how gcc is compil all that will do is make it generat the exact same code just a smidg faster and sinc gcc is such a memori pig you'd do better to buy more ram to up your fs cach hit and to keep gcc heap out of swap on the other side you can look into patch to gcc that affect it code generat um ok but keep in mind that compil error suck i can't express that enough compil should just work perfect alway do anyth that might affect that is in my opinion insan they'r hard to trace and you'd better have a deep knowledg of what go on to either report bug to the patch develop or to fix it yourself plus my understand is that gcc would need major chang to get larg speed boost on number chip kevin -- irish linux user group email URL for (un)subscript inform list maintain email