 i have some patch that seem to fix/avoid this problem now (it is amaz what one can achiev when main power fail long enough for up to run out and all that is left oper is the laptop and it batteri supply...) first i put in some defens code into the area where the problem was occur so that if exmh is attempt (for ani reason) to expand a sequenc that isn't either a number or a rang of number (or a list of such things) it will simpli ignor the trash rather than give a traceback this one solv the initi problem --- mh.tcl.was thu aug number number number +++ mh.tcl wed aug number number number email number number email set seq {} set rseq {} foreach rang [split [string trim dollar { + if ![regexp number dollar { + # just ignor anyth bogus + continu + } set part [split [string trim dollar -] if {[llength dollar == number { lappend seq dollar that is amend proc mhseqexpand which is where the error was occur befor (the code assum that dollar is either nnn or nnn-mmm so we should probabl make sure that true - issu an error instead of just "continue" if you like but i don't think an error is needed) but that just allow me to creat a similar problem in anoth place by type "nnn-" .. and rather than continu to fight fire like this i thought i should think more about brent suggest but rather than have the select code actual valid the input which would mean it would have to know what is to be valid i decid that the right thing to do is just to ignor ani error caus by invalid input so i just stuck a "catch" around the msgshow that is process the nonsens that the user has type this way ani later expans to what msgshow treat as legal (mayb allow a sequenc name like "prev" or "next" or anyth els can be handl just there without someon need to rememb that they have to go fix the select process code to allow it but while i was play there i notic someth i never new befor if you type number the number chang to number (and so on for each + that is typed) i suspect that perhap an artifact of "+ is bound to a differ function so it can be use as a toggl between chang the current and the target folder but it has to mean someth if the current input mode is a messag number so let it mean..." but now i found it i think it nice but if we can type number whi not number as well that kind of limit bug me so i fix it and then i wonder about folder with name contain + - the special use of + as the toggl charact mean there no way to type those from the keyboard so i fix that as well this make two differ restrict - there no way to type a folder name that has a name begin with + (but such a thing in mh would be a pain to use anyway so i doubt this will bother anyone) and it is now onli possibl to toggl between type the current & target folder name when the name be type is empti i'm less happi about that part but i think i can live with it in order to allow folder name with + in them to exist and be type then sinc i was there anyway i decid to do someth about anoth featur that has alway bug me in "normal" keyboard mode s is the key use to show a messag but if you'v just type number and the ftoc is highlight number as the current messag and you want to now show that messag you can't type s you have to type \r instead so i "fixed" this one as well "fixed" here is in quot as it assum that the keybind for msgshow is s if you chang that to someth els it will remain s in here i don't know enough tk/tcl to have it discov what key is bound to a function in the extern world in order to bind the same one here \r continu to work of cours and now i got start in fix irrit in this code i also made it clear the status line if you abort message/fold entri mode (^c or ^g) previous it use to leav the prompt sit there until the next messag appear which made it less than obvious that the keyboard had revert to it usual bind in ani case what follow is the patch that doe all of that i believ that if you appli this then the one abov is probabl not need the "catch" around the "msgshow" will hide the problem (i don't think we realli need to fix brent way of invok it) or includ it anyway just for complet (i haven't run an exmh with the follow patch but not the previous one so i don't know for sure that all will be ok then) kre --- select.tcl.wa thu aug number number number +++ select.tcl wed aug number number number email number number email bindtag dollar [list dollar entry] bind dollar  {selecttypein percent percent bind dollar  {selecttoggl percent } + bind dollar  {selectprev percent } bind dollar  {selectcomplet percent bind dollar  {selectcomplet percent bind dollar  {selectreturn percent + bind dollar  {selectreturn percent percent bind dollar  {selectbackspac percent bind dollar  {selectbackspac percent bind dollar  {selectbackspac percent email number number email append select(sel) dollar exmh_status dollar dollar if ![info exist select(folder)] { - msg_chang dollar noshow + catch { msg_chang dollar noshow } } } proc selectbackspac { w } { email number number email proc selecttoggl {w} { global select if [info exist select(folder)] { + if dollar != ""} { + selecttypein dollar + + return + } set select(toggle) [list [lindex dollar number [lindex dollar number set select(prompt) "[lindex dollar number folder:" } els { email number number email } exmh_status dollar dollar } +proc selectprev {w} { + global select + if [info exist select(folder)] { + selecttypein dollar "-" + } els { + catch { + incr select(sel) number + msg_chang dollar noshow + } + exmh_status dollar dollar + } +} proc selectcomplet { w } { global select if [info exist select(folder)] { email number number email exmh_status dollar dollar } } -proc selectreturn { w } { +proc selectreturn { w {a {}} } { global select if [info exist select(folder)] { + if dollar != {}} { + selecttypein dollar dollar + return + } if [info exist select(match)] { set select(sel) dollar unset select(match) email number number email unset select(folder) } dollar configur -state disabl + exmh_status "" exmh_focus } proc selectclear { w } { _______________________________________________ exmh-work mail list email URL