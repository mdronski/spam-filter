
==================== FINAL INTERFACE ====================
2018-01-21 20:57:09.234718707 UTC

interface main:DoesDirectoryExist001 8022
  interface hash: ce8f30376ef9315de35fde69d36bcf58
  ABI hash: 33737ea0f919bfdf227ddd6a8e0eb2a7
  export-list hash: 0451a3be47cb312ddee04a22014764c4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 96cda4d171844b9c139a00e66ee6eec2
  sig of: Nothing
  used TH splices: False
  where
exports:
  DoesDirectoryExist001.main
module dependencies: Util
package dependencies: array-0.5.2.0 base-4.10.1.0* deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.1.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 time-1.8.0.2 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  directory-1.3.1.5:System.Directory 674a63b5dfd5e6dd78c98f0675c7b451
import  -/  directory-1.3.1.5:System.Directory.Internal.Prelude 80f416161b0247624c76ff798606c39d
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  Util be2abed7083a51f4bdf8855a2d51cf9d
  exports: bd6a289d318cbda8f1f2ee2253928220
  TestEnv a2cda7416f6d830e42cdb7d432cd2a75
  expect a04a7356ad9c9c3a0cd7efbf55e7bd32
addDependentFile "tests/util.inl"
addDependentFile "/home/mdronski/.stack/programs/x86_64-linux/ghc-nopie-8.2.2/lib/ghc-8.2.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/test/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
8d68698424d05caaa6de9304b04c9746
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   DoesDirectoryExist001.$trModule3
                   DoesDirectoryExist001.$trModule1) -}
9926356aefa12d654accb07139e69c5a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DoesDirectoryExist001.$trModule2) -}
332b2b7e439a024253cca0580466a002
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DoesDirectoryExist001"#) -}
3de289a443c7439dba117d2c72bc5a8d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DoesDirectoryExist001.$trModule4) -}
a5e5374febd4d68e3b6ca8d3287395dc
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3dffc9690b7002ddb5e1a51897559c48
  $wmain ::
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.IORef.IORef GHC.Types.Int)
                   (ww1 :: GHC.Types.Bool)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Bool
                        @ GHC.Exception.SomeException
                        DoesDirectoryExist001.main22
                        System.Directory.doesDirectoryExist2
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Util.$wcheck
                        ww
                        ww1
                        ipv1
                        DoesDirectoryExist001.main19
                        Util.expect5
                        Util.expect2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case System.Posix.Directory.createDirectory1
                        DoesDirectoryExist001.main13
                        System.Directory.createDirectory2
                          `cast`
                        (Sym (System.Posix.Types.N:CMode[0]))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Bool
                        @ GHC.Exception.SomeException
                        DoesDirectoryExist001.main16
                        System.Directory.doesDirectoryExist2
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv7 of wild {
                   GHC.Types.False
                   -> case Util.$wprintInfo
                             ww1
                             DoesDirectoryExist001.main15
                             ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Bool
                             @ GHC.Exception.SomeException
                             DoesDirectoryExist001.main12
                             System.Directory.doesDirectoryExist2
                             ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                      Util.$wcheck
                        ww
                        ww1
                        ipv11
                        DoesDirectoryExist001.main3
                        Util.expect5
                        Util.expect2
                        ipv10 } }
                   GHC.Types.True
                   -> case ww
                             `cast`
                           (Nth:2
                                (Trans
                                     (<GHC.IORef.IORef GHC.Types.Int>_R
                                      ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                     (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  GHC.Types.Int #)>_R))) of wild1 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                      case ipv9 of wild2 { GHC.Types.I# x ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             (GHC.Types.I# (GHC.Prim.+# x 1#))
                             ipv8 of s2# { DEFAULT ->
                      case Util.check4
                             DoesDirectoryExist001.main8
                             s2# of ds6 { (#,#) ipv10 ipv11 ->
                      case GHC.Prim.catch#
                             @ GHC.Types.Bool
                             @ GHC.Exception.SomeException
                             DoesDirectoryExist001.main12
                             System.Directory.doesDirectoryExist2
                             ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                      case ipv13 of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.readMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ GHC.Types.Int
                                  var#
                                  ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                           case ipv15 of wild5 { GHC.Types.I# x1 ->
                           case GHC.Prim.writeMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ GHC.Types.Int
                                  var#
                                  (GHC.Types.I# (GHC.Prim.+# x1 1#))
                                  ipv14 of s2#1 { DEFAULT ->
                           Util.check4 DoesDirectoryExist001.main7 s2#1 } } }
                        GHC.Types.True
                        -> Util.$wprintInfo
                             ww1
                             DoesDirectoryExist001.main2
                             ipv12 } } } } } } } } } } } }) -}
6cc8bc3bc4fc32fcf02e91ed758eb443
  main :: Util.TestEnv -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U(U(U),U,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                DoesDirectoryExist001.main1
                  `cast`
                (<Util.TestEnv>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
39998f9c6f5867a4c5377d3738b0d601
  main1 ::
    Util.TestEnv
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U(U(U),U,A,A)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Util.TestEnv)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                 DoesDirectoryExist001.$wmain ww1 ww2 w1 }) -}
0ef663d298f1e1f40e2250dc01f3f1cd
  main10 :: GHC.Base.String
  {- Unfolding: (Util.showContext_$sshowContext
                   (GHC.CString.unpackCString# DoesDirectoryExist001.main6)
                   DoesDirectoryExist001.main11
                   GHC.Tuple.()) -}
615eda55c6726dc9003653afa13a54ef
  main11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (13) -}
c5e7a676194f3049693d42bb53710d6f
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 1,
     Unfolding: (System.Directory.doesDirectoryExist3
                   DoesDirectoryExist001.main13) -}
bfbc9ea7204a1c91561032611dad877f
  main13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   DoesDirectoryExist001.main14) -}
d854fb82b41d5e0a2715e1dd0b87d02f
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("somedir"#) -}
e0bf2f89b18d33a2f16bfc23ffdd725d
  main15 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Base.++
                   @ [GHC.Types.Char]
                   DoesDirectoryExist001.main9
                   Util.expect5) -}
da6af7a0aff1c1429fbcf0e57d58739d
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 1,
     Unfolding: (System.Directory.doesDirectoryExist3
                   DoesDirectoryExist001.main17) -}
3db542072e1f8f103bb3ffb4d1f2a2a9
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   DoesDirectoryExist001.main18) -}
18a315408c75676dd3133b96abffabdf
  main18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("nonexistent"#) -}
f446f75bb85fed023886af9528ff000a
  main19 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   DoesDirectoryExist001.main20
                   (GHC.Types.[] @ GHC.Base.String)) -}
cfb0304f7331a2483487d12dc5c2a785
  main2 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Base.++
                   @ [GHC.Types.Char]
                   DoesDirectoryExist001.main3
                   Util.expect5) -}
e03e8fd3f5598407cb77948fca899e07
  main20 :: GHC.Base.String
  {- Unfolding: (Util.showContext_$sshowContext
                   (GHC.CString.unpackCString# DoesDirectoryExist001.main6)
                   DoesDirectoryExist001.main21
                   GHC.Tuple.()) -}
b41f23553418a90503787a33ab7597ce
  main21 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
4701e37541e2109f75bca929a461e7b3
  main22 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 1,
     Unfolding: (System.Directory.doesDirectoryExist3
                   DoesDirectoryExist001.main23) -}
d149899ef66ca33de2d82b20bafa778b
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   DoesDirectoryExist001.main24) -}
3494449187e5536e29f880caca5c2f55
  main24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
cc76dec3e1b85c4fb3f16105fefa392e
  main3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   DoesDirectoryExist001.main4
                   (GHC.Types.[] @ GHC.Base.String)) -}
d89bd9aed8d7c371e5df100afeabe8dd
  main4 :: GHC.Base.String
  {- Unfolding: (Util.showContext_$sshowContext
                   (GHC.CString.unpackCString# DoesDirectoryExist001.main6)
                   DoesDirectoryExist001.main5
                   GHC.Tuple.()) -}
1bd25635be49d03417e2ec8c8c5b7c00
  main5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (14) -}
fadb2374b1ba07ba269c545d5b4d1ba1
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tests/DoesDirectoryExist001.hs"#) -}
1b20b5f86f17f768c9322b9d8eb7ebb1
  main7 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Base.++
                   @ [GHC.Types.Char]
                   DoesDirectoryExist001.main3
                   Util.expect2) -}
5e8da5bbd44a91c3dabcec03e2622af6
  main8 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Base.++
                   @ [GHC.Types.Char]
                   DoesDirectoryExist001.main9
                   Util.expect2) -}
9558fb8c9a3df523a1cc262cf84efc06
  main9 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   DoesDirectoryExist001.main10
                   (GHC.Types.[] @ GHC.Base.String)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

