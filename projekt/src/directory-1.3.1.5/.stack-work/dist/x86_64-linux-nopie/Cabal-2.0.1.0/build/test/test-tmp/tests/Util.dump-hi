
==================== FINAL INTERFACE ====================
2018-01-21 20:57:08.138863791 UTC

interface main:Util 8022
  interface hash: 1c8bb15ada33c59df87d05ff6e2f4364
  ABI hash: be2abed7083a51f4bdf8855a2d51cf9d
  export-list hash: bd6a289d318cbda8f1f2ee2253928220
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 45951f12ae4769eb08a30d823cb457c0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Util.check
  Util.checkEither
  Util.expect
  Util.expectEq
  Util.expectIOErrorType
  Util.expectNe
  Util.expectNear
  Util.expectNearTime
  Util.getArg
  Util.inform
  Util.isolateWorkingDirectory
  Util.isolatedRun
  Util.modifyIORef'
  Util.parseArgs
  Util.preprocessPathRecursive
  Util.printErr
  Util.printFailure
  Util.printInfo
  Util.readArg
  Util.readBool
  Util.run
  Util.showContext
  Util.testMain
  Util.timeLimit
  Util.tryAny
  Util.tryRead
  Util.withNewDirectory
  Util.TestEnv{Util.TestEnv testArgs testCounter testKeepDirs testSilent}
module dependencies:
package dependencies: array-0.5.2.0 base-4.10.1.0* deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.1.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 time-1.8.0.2 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Control.Arrow b4ff99f516cf3ba87a1e4985dc7f496f
import  -/  base-4.10.1.0:Control.Exception.Base a0c09fb1722df56c4c26d548157007ca
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.Either d7dae5d9bf298dee616e465c14b5d60e
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.Maybe 07738c5485acb328136bb15596f8b845
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Conc.Sync 3cf9d980bef04043684377f638021935
import  -/  base-4.10.1.0:GHC.Exception 471142a05c31a6533c10399f8190de35
import  -/  base-4.10.1.0:GHC.IO e261d8b68ccf81a359626fa520b57d1d
import  -/  base-4.10.1.0:GHC.IO.Exception c72758923693d771268bed5d3d52443d
import  -/  base-4.10.1.0:GHC.IO.Handle 5f614cc041d5fa954b0de4d7c73104fe
import  -/  base-4.10.1.0:GHC.IO.Handle.FD e06fbff6d2dafa211cd5a82e8b1f2f2d
import  -/  base-4.10.1.0:GHC.IO.Handle.Text f965c72d2e9a995ca335a979dc85c98d
import  -/  base-4.10.1.0:GHC.IORef fcf9a9efa120217c33e71b5dc4a08e1f
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.MVar b1970e54b4c552d660c9a97d807961dc
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Read 0abfbe8a9b13202e313efc3bc2f2a3e6
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:GHC.Unicode 49c9de4fffed0d9be65aaeb6a60b757c
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.Environment c9f912affeed5beb387a8c5d2b2c6102
import  -/  base-4.10.1.0:System.Exit dfc0230e6f69e5284631635d15ff33dc
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  base-4.10.1.0:System.Timeout c82aa0f632178ac40cdbfead7ca85f74
import  -/  base-4.10.1.0:Text.Read 9e862e012b3c71e83cb56fb456188f44
import  -/  directory-1.3.1.5:System.Directory 674a63b5dfd5e6dd78c98f0675c7b451
import  -/  directory-1.3.1.5:System.Directory.Internal.Prelude 80f416161b0247624c76ff798606c39d
import  -/  filepath-1.4.1.2:System.FilePath 3751e022be1498b82ed80e7d6465cd1a
import  -/  filepath-1.4.1.2:System.FilePath.Posix e53ce4f7e12552941b411aaefd9d2247
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
import  -/  time-1.8.0.2:Data.Time.Clock 4a00926e887552bf2184b9495fd238f5
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.NominalDiffTime bc28a0c1852c38d7bbec9956b7aa6223
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCDiff 65e91f53c7136fa33a35fff03f066598
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCTime 71bab4ae2f93d15d9b706c230968f165
3716ca345934267ecd7e1f52e4662018
  $tc'TestEnv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7263747907765677664##
                   15257756027103685529##
                   Util.$trModule
                   Util.$tc'TestEnv2
                   0#
                   Util.$tc'TestEnv1) -}
4401873c5e323f9214d189d3b596f317
  $tc'TestEnv1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b66fadfbfdd4fa05dd06baf93200f5b9
  $tc'TestEnv2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Util.$tc'TestEnv3) -}
4779e36bb0e5a488d0982df5b7d3cd5f
  $tc'TestEnv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TestEnv"#) -}
27c0e895573869afb6592fbbb0ceeeea
  $tcTestEnv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15465599903110092290##
                   15783539313457484050##
                   Util.$trModule
                   Util.$tcTestEnv1
                   0#
                   GHC.Types.krep$*) -}
88e8033c39170be73ed97d440d13d7e6
  $tcTestEnv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Util.$tcTestEnv2) -}
1f98b627b11b9380273ad09ab75646e0
  $tcTestEnv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TestEnv"#) -}
928878a57c429fe8ad8008c5ec64b283
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Util.$trModule3 Util.$trModule1) -}
0988517583cc5ccb8afa6c146c72f882
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Util.$trModule2) -}
4220cb834f74fcbb9d71d0d4ca84b764
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Util"#) -}
37d913d0d1bf3900345efc1609c6737b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Util.$trModule4) -}
f8adc5a478af1e43217e228de2156d6f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
149b7e4c0ef75324634648adbcf4d8a2
  $wcheck ::
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,1*U(U)><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.IORef.IORef GHC.Types.Int)
                   (ww1 :: GHC.Types.Bool)
                   (w :: GHC.Types.Bool)
                   (w1 :: [GHC.Base.String])
                   (w2 :: [GHC.Base.String])
                   (w3 :: [GHC.Base.String])
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of wild {
                   GHC.Types.False
                   -> case ww
                             `cast`
                           (Nth:2
                                (Trans
                                     (<GHC.IORef.IORef GHC.Types.Int>_R
                                      ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                     (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  GHC.Types.Int #)>_R))) of wild1 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             w4 of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild2 { GHC.Types.I# x ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             (GHC.Types.I# (GHC.Prim.+# x 1#))
                             ipv of s2# { DEFAULT ->
                      Util.check4 (GHC.Base.++ @ [GHC.Types.Char] w1 w3) s2# } } } }
                   GHC.Types.True
                   -> Util.$wprintInfo
                        ww1
                        (GHC.Base.++ @ [GHC.Types.Char] w1 w2)
                        w4 }) -}
5ee1097cc73575c4a307e0af6d9a934d
  $wcheckEither ::
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Types.Bool
    -> [GHC.Base.String]
    -> Data.Either.Either [GHC.Base.String] [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,1*U(U)><L,1*U><L,1*U><S,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.IORef.IORef GHC.Types.Int)
                   (ww1 :: GHC.Types.Bool)
                   (w :: [GHC.Base.String])
                   (w1 :: Data.Either.Either [GHC.Base.String] [GHC.Base.String])
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of wild {
                   Data.Either.Left msg
                   -> case ww
                             `cast`
                           (Nth:2
                                (Trans
                                     (<GHC.IORef.IORef GHC.Types.Int>_R
                                      ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                     (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  GHC.Types.Int #)>_R))) of wild1 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             w2 of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild2 { GHC.Types.I# x ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             (GHC.Types.I# (GHC.Prim.+# x 1#))
                             ipv of s2# { DEFAULT ->
                      Util.check4 (GHC.Base.++ @ [GHC.Types.Char] w msg) s2# } } } }
                   Data.Either.Right msg
                   -> Util.$wprintInfo
                        ww1
                        (GHC.Base.++ @ [GHC.Types.Char] w msg)
                        w2 }) -}
b62899078b1e342f850ec9f5c417583b
  $wexpectIOErrorType ::
    GHC.Show.Show a =>
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> a
    -> (GHC.IO.Exception.IOError -> GHC.Types.Bool)
    -> GHC.Types.IO b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,1*U(A,1*C1(U),A)><L,1*U(U)><L,1*U><L,1*U><L,U><L,U><L,1*C1(U)><L,1*C1(U(U,U))><S,U>,
     Inline: [0] -}
d442adb455ba1d2375c4b88387add686
  $wgetArg ::
    (GHC.Base.String -> GHC.Base.Maybe a)
    -> [(GHC.Base.String, GHC.Base.String)]
    -> GHC.Base.String
    -> GHC.Base.String
    -> a
    -> a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U)><S,1*U><L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Base.String -> GHC.Base.Maybe a)
                   (ww :: [(GHC.Base.String, GHC.Base.String)])
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: a) ->
                 case GHC.List.lookup
                        @ [GHC.Types.Char]
                        @ GHC.Base.String
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        (case GHC.Base.eqString
                                w1
                                (GHC.Types.[] @ GHC.Types.Char) of wild {
                           GHC.Types.False
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                w1
                                (GHC.CString.unpackAppendCString# Util.getArg1 w2)
                           GHC.Types.True -> w2 })
                        ww of wild {
                   GHC.Base.Nothing -> w3
                   GHC.Base.Just x
                   -> case w x of wild1 {
                        GHC.Base.Nothing -> w3 GHC.Base.Just v -> v } }) -}
c15d203db5e782260241943a014bb625
  $wisolatedRun ::
    GHC.IORef.IORef GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> [(GHC.Base.String, GHC.Base.String)]
    -> GHC.Base.String
    -> (Util.TestEnv -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,U(U)><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.IORef.IORef GHC.Types.Int)
                   (ww1 :: GHC.Types.Bool)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: [(GHC.Base.String, GHC.Base.String)])
                   (w :: GHC.Base.String) ->
                 let {
                   g :: [GHC.Types.Char]
                   = GHC.CString.unpackAppendCString#
                       Util.isolatedRun7
                       (GHC.Base.++ @ GHC.Types.Char w Util.isolatedRun5)
                 } in
                 let {
                   wild :: Util.TestEnv = Util.TestEnv ww ww1 ww2 ww3
                 } in
                 (\ (x :: Util.TestEnv -> GHC.Types.IO ())
                    (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case Util.isolatedRun3
                         @ ()
                         (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          Util.isolateWorkingDirectory1 @ () ww2 g (x wild) eta1)
                           `cast`
                         (Sym (GHC.Types.N:IO[0] <()>_R))
                         eta of ds1 { (#,#) ipv ipv1 ->
                  case ipv1 of wild1 {
                    Data.Either.Left e
                    -> case ww
                              `cast`
                            (Nth:2
                                 (Trans
                                      (<GHC.IORef.IORef GHC.Types.Int>_R
                                       ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                      (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                       ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   GHC.Types.Int #)>_R))) of wild2 { GHC.STRef.STRef var# ->
                       case GHC.Prim.readMutVar#
                              @ GHC.Prim.RealWorld
                              @ GHC.Types.Int
                              var#
                              ipv of ds2 { (#,#) ipv2 ipv3 ->
                       case ipv3 of wild3 { GHC.Types.I# x1 ->
                       case GHC.Prim.writeMutVar#
                              @ GHC.Prim.RealWorld
                              @ GHC.Types.Int
                              var#
                              (GHC.Types.I# (GHC.Prim.+# x1 1#))
                              ipv2 of s2# { DEFAULT ->
                       Util.check4
                         (GHC.Types.:
                            @ [GHC.Types.Char]
                            w
                            (GHC.Types.:
                               @ [GHC.Types.Char]
                               Util.isolatedRun1
                               (GHC.Types.:
                                  @ [GHC.Types.Char]
                                  (GHC.Exception.$fShowSomeException_$cshow e)
                                  (GHC.Types.[] @ [GHC.Types.Char]))))
                         s2# } } } }
                    Data.Either.Right ds
                    -> case ds of wild2 { () -> (# ipv, GHC.Tuple.() #) } } })
                   `cast`
                 (<Util.TestEnv -> GHC.Types.IO ()>_R
                  ->_R Sym (GHC.Types.N:IO[0] <()>_R))) -}
57521d3853463885ab2ee725a054f941
  $wprintInfo ::
    GHC.Types.Bool
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U><L,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Bool)
                   (w :: [GHC.Base.String])
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ww of wild {
                   GHC.Types.False
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (case w of wild1 {
                                [] -> GHC.Types.[] @ GHC.Types.Char
                                : x xs1
                                -> Data.OldList.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     x
                                     (Data.OldList.prependToAll
                                        @ [GHC.Types.Char]
                                        Util.check2
                                        xs1) })
                             GHC.Types.True
                             w1 of ds1 { (#,#) ipv ipv1 ->
                      GHC.IO.Handle.Internals.wantWritableHandle1
                        @ ()
                        GHC.IO.Handle.hFlush2
                        GHC.IO.Handle.FD.stdout
                        GHC.IO.Handle.Internals.flushWriteBuffer1
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv }
                   GHC.Types.True -> (# w1, GHC.Tuple.() #) }) -}
2fd3a7e46ac12673729c904361873517
  $wtimeLimit ::
    GHC.Prim.Double#
    -> GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, Strictness: <S,U><L,1*C1(U(U,U))><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.Double#)
                   (w :: GHC.Types.IO a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall base-4.10.1.0 GHC.Prim.Double#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Double# #)}
                        (GHC.Prim.*## 1000000.0## ww)
                        GHC.Prim.realWorld# of wild { (#,#) ds2 ds3 ->
                 case System.Timeout.$wtimeout
                        @ a
                        (GHC.Prim.double2Int# ds3)
                        w
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild1 {
                   GHC.Base.Nothing
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ a
                        Util.timeLimit2
                        ipv
                   GHC.Base.Just x -> (# ipv, x #) } } }) -}
ed50b7c310eaa48c02697451c43eb0bb
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
a2cda7416f6d830e42cdb7d432cd2a75
  data TestEnv
    = TestEnv {testCounter :: GHC.IORef.IORef GHC.Types.Int,
               testSilent :: GHC.Types.Bool,
               testKeepDirs :: GHC.Types.Bool,
               testArgs :: [(GHC.Base.String, GHC.Base.String)]}
ef7e6bfa81896938c6e88b68d6d77f46
  check ::
    Util.TestEnv
    -> GHC.Types.Bool
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <S,1*U(1*U(U),1*U,A,A)><S,1*U><L,1*U><L,1*U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.check1
                  `cast`
                (<Util.TestEnv>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b02ae6143bd9cdb33a9806c596e6bd51
  check1 ::
    Util.TestEnv
    -> GHC.Types.Bool
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U(1*U(U),1*U,A,A)><S,1*U><L,1*U><L,1*U><L,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Util.TestEnv)
                   (w1 :: GHC.Types.Bool)
                   (w2 :: [GHC.Base.String])
                   (w3 :: [GHC.Base.String])
                   (w4 :: [GHC.Base.String])
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                 Util.$wcheck ww1 ww2 w1 w2 w3 w4 w5 }) -}
d7fea55b5b7de6ba49a278d6d6c672d7
  check2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.check3) -}
99af5847ab575b27d76191bf40fe3212
  check3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (": "#) -}
c8095de4a137c347e83eee5919fb47a0
  check4 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (msg :: [GHC.Base.String])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stderr
                        (GHC.CString.unpackAppendCString#
                           Util.check5
                           (case msg of wild {
                              [] -> GHC.Types.[] @ GHC.Types.Char
                              : x xs1
                              -> Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Util.check2
                                      xs1) }))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Internals.wantWritableHandle1
                   @ ()
                   GHC.IO.Handle.hFlush2
                   GHC.IO.Handle.FD.stderr
                   GHC.IO.Handle.Internals.flushWriteBuffer1
                     `cast`
                   (<GHC.IO.Handle.Types.Handle__>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   ipv }) -}
fbd2cb68ad0b1765ab137aebf5fa0469
  check5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*** "#) -}
8ba0fd28f5b9f144114e49aa5c0cc702
  checkEither ::
    Util.TestEnv
    -> [GHC.Base.String]
    -> Data.Either.Either [GHC.Base.String] [GHC.Base.String]
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U,A,A)><L,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.checkEither1
                  `cast`
                (<Util.TestEnv>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R <Data.Either.Either [GHC.Base.String] [GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7c5465e7c648b4a6bc332352f22c7ac7
  checkEither1 ::
    Util.TestEnv
    -> [GHC.Base.String]
    -> Data.Either.Either [GHC.Base.String] [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U,A,A)><L,1*U><S,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Util.TestEnv)
                   (w1 :: [GHC.Base.String])
                   (w2 :: Data.Either.Either [GHC.Base.String] [GHC.Base.String])
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                 Util.$wcheckEither ww1 ww2 w1 w2 w3 }) -}
a04a7356ad9c9c3a0cd7efbf55e7bd32
  expect ::
    GHC.Show.Show a =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> a
    -> GHC.Types.Bool
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.expect1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Show.Show a>_R
                 ->_R <Util.TestEnv>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <a>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0057f9b2fe0745bea281a8cfb6d5f6c0
  expect1 ::
    GHC.Show.Show a =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> a
    -> GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><S,1*U><S,U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (t :: Util.TestEnv)
                   (file :: GHC.Base.String)
                   (line :: GHC.Integer.Type.Integer)
                   (context :: a)
                   (x :: GHC.Types.Bool) ->
                 Util.check1
                   t
                   x
                   (GHC.Types.:
                      @ GHC.Base.String
                      (Util.showContext @ a $dShow file line context)
                      (GHC.Types.[] @ GHC.Base.String))
                   Util.expect5
                   Util.expect2) -}
fbf40d87a54ee7d1155f308a86e3bd58
  expect2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Util.expect3
                   (GHC.Types.[] @ GHC.Base.String)) -}
7d5e46d30833d0f164ca9079f760110b
  expect3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.expect4) -}
6ccfc349857d40abc5942f39a3a4a5e1
  expect4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("False, but True was expected"#) -}
883ebf542119630b13b67b9c3ea427cb
  expect5 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Util.expect6
                   (GHC.Types.[] @ GHC.Base.String)) -}
005b7b2370989c6ba7a97a1785596ef3
  expect6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.expect7) -}
983b7b008a16e701bae9d5fc2c0803fd
  expect7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("True"#) -}
d2c7922486099777f871dbfb26d4fa7f
  expectEq ::
    (GHC.Classes.Eq a, GHC.Show.Show a, GHC.Show.Show b) =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> b
    -> a
    -> a
    -> GHC.Types.IO ()
  {- Arity: 10,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(A,C(U),A)><L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.expectEq1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Show.Show a>_R
                 ->_R <GHC.Show.Show b>_R
                 ->_R <Util.TestEnv>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <b>_R
                 ->_R <a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0884a225a750a1ecaebb5e0c9fcf32bf
  expectEq1 ::
    (GHC.Classes.Eq a, GHC.Show.Show a, GHC.Show.Show b) =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> b
    -> a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(A,C(U),A)><L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (t :: Util.TestEnv)
                   (file :: GHC.Base.String)
                   (line :: GHC.Integer.Type.Integer)
                   (context :: b)
                   (x :: a)
                   (y :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.== @ a $dEq x y of wild {
                   GHC.Types.False
                   -> case t of wild1 { Util.TestEnv ds ds1 ds2 ds3 ->
                      case ds
                             `cast`
                           (Nth:2
                                (Trans
                                     (<GHC.IORef.IORef GHC.Types.Int>_R
                                      ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                     (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  GHC.Types.Int #)>_R))) of wild2 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             eta of ds4 { (#,#) ipv ipv1 ->
                      case ipv1 of wild3 { GHC.Types.I# x1 ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             (GHC.Types.I# (GHC.Prim.+# x1 1#))
                             ipv of s2# { DEFAULT ->
                      Util.check4
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           (GHC.Types.:
                              @ GHC.Base.String
                              (Util.showContext @ b $dShow1 file line context)
                              (GHC.Types.[] @ GHC.Base.String))
                           (GHC.Types.:
                              @ GHC.Base.String
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ a $dShow x)
                                 (GHC.CString.unpackAppendCString#
                                    Util.expectEq3
                                    (GHC.Show.show @ a $dShow y)))
                              (GHC.Types.[] @ GHC.Base.String)))
                        s2# } } } } }
                   GHC.Types.True
                   -> case t of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                      Util.$wprintInfo
                        ww2
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           (GHC.Types.:
                              @ GHC.Base.String
                              (Util.showContext @ b $dShow1 file line context)
                              (GHC.Types.[] @ GHC.Base.String))
                           (GHC.Types.:
                              @ GHC.Base.String
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ a $dShow x)
                                 (GHC.CString.unpackAppendCString#
                                    Util.expectEq2
                                    (GHC.Show.show @ a $dShow y)))
                              (GHC.Types.[] @ GHC.Base.String)))
                        eta } }) -}
e8dec245078c6452eb80539772a5464c
  expectEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" equals "#) -}
01e8a90bae3272f7cd5d0fba08ac0272
  expectEq3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" is not equal to "#) -}
50701796241c2da9bf16723bf0ab8f6b
  expectIOErrorType ::
    GHC.Show.Show a =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> a
    -> (GHC.IO.Exception.IOError -> GHC.Types.Bool)
    -> GHC.Types.IO b
    -> GHC.Types.IO ()
  {- Arity: 8,
     Strictness: <L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><L,1*C1(U)><L,1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.expectIOErrorType1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Show.Show a>_R
                 ->_R <Util.TestEnv>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <a>_R
                 ->_R <GHC.IO.Exception.IOError -> GHC.Types.Bool>_R
                 ->_R <GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4f2ff5d0167e320a11de0e34b0e981b3
  expectIOErrorType1 ::
    GHC.Show.Show a =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> a
    -> (GHC.IO.Exception.IOError -> GHC.Types.Bool)
    -> GHC.Types.IO b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><L,1*C1(U)><L,1*C1(U(U,U))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show a)
                   (w1 :: Util.TestEnv)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Integer.Type.Integer)
                   (w4 :: a)
                   (w5 :: GHC.IO.Exception.IOError -> GHC.Types.Bool)
                   (w6 :: GHC.Types.IO b)
                   (w7 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                 Util.$wexpectIOErrorType @ a @ b w ww1 ww2 w2 w3 w4 w5 w6 w7 }) -}
66b3178a990cfe204b01c0375482bdf4
  expectNe ::
    (GHC.Classes.Eq a, GHC.Show.Show a, GHC.Show.Show b) =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> b
    -> a
    -> a
    -> GHC.Types.IO ()
  {- Arity: 10,
     Strictness: <S(LC(C(S))),1*U(A,1*C1(C1(U)))><L,U(A,C(U),A)><L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.expectNe1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Classes.Eq a>_R
                 ->_R <GHC.Show.Show a>_R
                 ->_R <GHC.Show.Show b>_R
                 ->_R <Util.TestEnv>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <b>_R
                 ->_R <a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d6469d18e14818e91786e6a5951bf005
  expectNe1 ::
    (GHC.Classes.Eq a, GHC.Show.Show a, GHC.Show.Show b) =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> b
    -> a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <S(LC(C(S))),1*U(A,1*C1(C1(U)))><L,U(A,C(U),A)><L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (t :: Util.TestEnv)
                   (file :: GHC.Base.String)
                   (line :: GHC.Integer.Type.Integer)
                   (context :: b)
                   (x :: a)
                   (y :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes./= @ a $dEq x y of wild {
                   GHC.Types.False
                   -> case t of wild1 { Util.TestEnv ds ds1 ds2 ds3 ->
                      case ds
                             `cast`
                           (Nth:2
                                (Trans
                                     (<GHC.IORef.IORef GHC.Types.Int>_R
                                      ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                     (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  GHC.Types.Int #)>_R))) of wild2 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             eta of ds4 { (#,#) ipv ipv1 ->
                      case ipv1 of wild3 { GHC.Types.I# x1 ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             (GHC.Types.I# (GHC.Prim.+# x1 1#))
                             ipv of s2# { DEFAULT ->
                      Util.check4
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           (GHC.Types.:
                              @ GHC.Base.String
                              (Util.showContext @ b $dShow1 file line context)
                              (GHC.Types.[] @ GHC.Base.String))
                           (GHC.Types.:
                              @ GHC.Base.String
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ a $dShow x)
                                 (GHC.CString.unpackAppendCString#
                                    Util.expectEq2
                                    (GHC.Show.show @ a $dShow y)))
                              (GHC.Types.[] @ GHC.Base.String)))
                        s2# } } } } }
                   GHC.Types.True
                   -> case t of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                      Util.$wprintInfo
                        ww2
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           (GHC.Types.:
                              @ GHC.Base.String
                              (Util.showContext @ b $dShow1 file line context)
                              (GHC.Types.[] @ GHC.Base.String))
                           (GHC.Types.:
                              @ GHC.Base.String
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ a $dShow x)
                                 (GHC.CString.unpackAppendCString#
                                    Util.expectEq3
                                    (GHC.Show.show @ a $dShow y)))
                              (GHC.Types.[] @ GHC.Base.String)))
                        eta } }) -}
ea2b6522cfd77c2b65ef084ef9cac933
  expectNear ::
    (GHC.Num.Num a, GHC.Classes.Ord a, GHC.Show.Show a,
     GHC.Show.Show b) =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> b
    -> a
    -> a
    -> a
    -> GHC.Types.IO ()
  {- Arity: 12,
     Strictness: <L,U(A,1*C1(C1(U)),A,A,1*C1(U),A,A)><S(LLLC(C(S))LLLL),1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><L,U(A,C(U),A)><L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.expectNear1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Num.Num a>_R
                 ->_R <GHC.Classes.Ord a>_R
                 ->_R <GHC.Show.Show a>_R
                 ->_R <GHC.Show.Show b>_R
                 ->_R <Util.TestEnv>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <b>_R
                 ->_R <a>_R
                 ->_R <a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4cf0967e3b6e220f4106b8f1e9d5b235
  expectNear1 ::
    (GHC.Num.Num a, GHC.Classes.Ord a, GHC.Show.Show a,
     GHC.Show.Show b) =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> b
    -> a
    -> a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 12,
     Strictness: <L,U(A,1*C1(C1(U)),A,A,1*C1(U),A,A)><S(LLLC(C(S))LLLL),1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><L,U(A,C(U),A)><L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><L,U><L,U><L,U><S,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   (t :: Util.TestEnv)
                   (file :: GHC.Base.String)
                   (line :: GHC.Integer.Type.Integer)
                   (context :: b)
                   (x :: a)
                   (y :: a)
                   (diff :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Classes.<=
                        @ a
                        $dOrd
                        (GHC.Num.abs @ a $dNum (GHC.Num.- @ a $dNum x y))
                        diff of wild {
                   GHC.Types.False
                   -> case t of wild1 { Util.TestEnv ds ds1 ds2 ds3 ->
                      case ds
                             `cast`
                           (Nth:2
                                (Trans
                                     (<GHC.IORef.IORef GHC.Types.Int>_R
                                      ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                     (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  GHC.Types.Int #)>_R))) of wild2 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             eta of ds4 { (#,#) ipv ipv1 ->
                      case ipv1 of wild3 { GHC.Types.I# x1 ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             (GHC.Types.I# (GHC.Prim.+# x1 1#))
                             ipv of s2# { DEFAULT ->
                      Util.check4
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           (GHC.Types.:
                              @ GHC.Base.String
                              (Util.showContext @ b $dShow1 file line context)
                              (GHC.Types.[] @ GHC.Base.String))
                           (GHC.Types.:
                              @ GHC.Base.String
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ a $dShow x)
                                 (GHC.CString.unpackAppendCString#
                                    Util.expectNear3
                                    (GHC.Show.show @ a $dShow y)))
                              (GHC.Types.[] @ GHC.Base.String)))
                        s2# } } } } }
                   GHC.Types.True
                   -> case t of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                      Util.$wprintInfo
                        ww2
                        (GHC.Base.++
                           @ [GHC.Types.Char]
                           (GHC.Types.:
                              @ GHC.Base.String
                              (Util.showContext @ b $dShow1 file line context)
                              (GHC.Types.[] @ GHC.Base.String))
                           (GHC.Types.:
                              @ GHC.Base.String
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ a $dShow x)
                                 (GHC.CString.unpackAppendCString#
                                    Util.expectNear2
                                    (GHC.Show.show @ a $dShow y)))
                              (GHC.Types.[] @ GHC.Base.String)))
                        eta } }) -}
617bb9fcc9100b2931ce662a2a5f761f
  expectNear2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" is near "#) -}
158ea7e2300c9bffd771f6792bdafeb7
  expectNear3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" is not near "#) -}
cfd198af9a1436fbd2d02d060aa4f6fd
  expectNearTime ::
    GHC.Show.Show a =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> a
    -> Data.Time.Clock.Internal.UTCTime.UTCTime
    -> Data.Time.Clock.Internal.UTCTime.UTCTime
    -> Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime
    -> GHC.Types.IO ()
  {- Arity: 9,
     Strictness: <L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><S(SS),1*U(U,U)><S(SS),1*U(U,U)><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.expectNearTime1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Show.Show a>_R
                 ->_R <Util.TestEnv>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <a>_R
                 ->_R <Data.Time.Clock.Internal.UTCTime.UTCTime>_R
                 ->_R <Data.Time.Clock.Internal.UTCTime.UTCTime>_R
                 ->_R <Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ca2ac7bee05f97a1076acb7bee28cdcf
  expectNearTime1 ::
    GHC.Show.Show a =>
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> a
    -> Data.Time.Clock.Internal.UTCTime.UTCTime
    -> Data.Time.Clock.Internal.UTCTime.UTCTime
    -> Data.Time.Clock.Internal.NominalDiffTime.NominalDiffTime
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,1*U(A,1*C1(U),A)><S,1*U(1*U(U),1*U,A,A)><L,1*U><L,U><L,U><S(SS),1*U(U,U)><S(SS),1*U(U,U)><S,U><S,U> -}
b32b5d1921ab1ba0b162e62bfba1c204
  getArg ::
    (GHC.Base.String -> GHC.Base.Maybe a)
    -> Util.TestEnv -> GHC.Base.String -> GHC.Base.String -> a -> a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*C1(U)><S(LLLS),1*U(A,A,A,1*U)><L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   (w :: GHC.Base.String -> GHC.Base.Maybe a)
                   (w1 :: Util.TestEnv)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String)
                   (w4 :: a) ->
                 case w1 of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                 Util.$wgetArg @ a w ww4 w2 w3 w4 }) -}
e431852b5ff1c8e0c1adf6c82316e4b8
  getArg1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("."#) -}
8dae0c67e6cd8476d576203b1418fda8
  inform ::
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(LSLL),1*U(A,1*U,A,A)><L,1*U><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.inform1
                  `cast`
                (<Util.TestEnv>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
653c43a0bbc25c3e9b11231b961cdbde
  inform1 ::
    Util.TestEnv
    -> GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(LSLL),1*U(A,1*U,A,A)><L,1*U><L,U><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (t :: Util.TestEnv)
                   (file :: GHC.Base.String)
                   (line :: GHC.Integer.Type.Integer)
                   (msg :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Util.inform2
                   t
                   (GHC.Types.:
                      @ GHC.Base.String
                      (Util.showContext_$sshowContext file line GHC.Tuple.())
                      (GHC.Types.:
                         @ GHC.Base.String
                         msg
                         (GHC.Types.[] @ GHC.Base.String)))
                   eta) -}
1c325bc47b11b600a1c0a8334a35c720
  inform2 ::
    Util.TestEnv
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S(LSLL),1*U(A,1*U,A,A)><L,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Util.TestEnv)
                   (w1 :: [GHC.Base.String])
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                 Util.$wprintInfo ww2 w1 w2 }) -}
9c09973b08bbfb6ac9406d7eac0966ca
  isolateWorkingDirectory ::
    GHC.Types.Bool
    -> GHC.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
  {- Arity: 4, Strictness: <L,U><L,U><L,C(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.isolateWorkingDirectory1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.Bool>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
b6846bed538780d67ec977d1d3e4606a
  isolateWorkingDirectory1 ::
    GHC.Types.Bool
    -> GHC.IO.FilePath
    -> GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, Strictness: <L,U><L,U><L,C(U)><S,U>,
     Unfolding: (\ @ a
                   (keep :: GHC.Types.Bool)
                   (dir :: GHC.IO.FilePath)
                   (action :: GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.List.elem
                        @ GHC.IO.FilePath
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        (System.FilePath.Posix.normalise dir)
                        Util.isolateWorkingDirectory7 of wild {
                   GHC.Types.False
                   -> case System.Directory.makeAbsolute1
                             dir
                             s of ds1 { (#,#) ipv ipv1 ->
                      case System.Directory.removePathForcibly1
                             ipv1
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      Util.isolateWorkingDirectory6
                        @ a
                        keep
                        ipv1
                        (System.Directory.withCurrentDirectory1 @ a ipv1 action)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <a>_R))
                        ipv2 } }
                   GHC.Types.True
                   -> case GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ ()
                             Util.isolateWorkingDirectory2
                             s
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                      of {} }) -}
ecdd851ea0ab602b9d95547c23a8f31b
  isolateWorkingDirectory10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("./"#) -}
b6f572456c3a965f3db5e4c44a05aa16
  isolateWorkingDirectory11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.getArg1) -}
08765ce3a849f4eb6a4f2632323fe23e
  isolateWorkingDirectory2 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Util.isolateWorkingDirectory3) -}
6e604c1cf0a3f7134f0ae17abe014bd0
  isolateWorkingDirectory3 :: GHC.IO.Exception.IOException
  {- Strictness: m,
     Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   Util.isolateWorkingDirectory4
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
02f17c012a6d6a364510cb3933a0aaa4
  isolateWorkingDirectory4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Util.isolateWorkingDirectory5) -}
c22d30e38ef273d54ba8079c17fc0363
  isolateWorkingDirectory5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("isolateWorkingDirectory cannot be used with current directory"#) -}
2e8c8b79d0a43d073e8e9148d031c16f
  isolateWorkingDirectory6 ::
    GHC.Types.Bool
    -> GHC.IO.FilePath
    -> GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, Strictness: <L,U><L,U><L,C(U)><S,U>,
     Unfolding: (\ @ a
                   (keep :: GHC.Types.Bool)
                   (dir :: GHC.IO.FilePath)
                   (action :: GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Directory.makeAbsolute1
                        dir
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.getMaskingState# ipv of ds { (#,#) ipv2 ipv3 ->
                 case ipv3 of ds2 {
                   DEFAULT
                   -> case System.Directory.createDirectoryIfMissing3
                             (System.Directory.createDirectoryIfMissing_parents ipv1)
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.catch#
                             @ a
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskAsyncExceptions#
                                @ a
                                action
                                  `cast`
                                (Nth:2
                                     (Trans
                                          (<GHC.Types.IO a>_R ->_R GHC.Types.N:IO[0] <a>_R)
                                          (GHC.Types.N:IO[0] <a>_R
                                           ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a #)>_R))))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case keep of wild {
                                GHC.Types.False
                                -> case System.Directory.removePathForcibly1
                                          ipv1
                                          s1 of ds4 { (#,#) ipv6 ipv7 ->
                                   GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 ipv6 }
                                GHC.Types.True
                                -> GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 s1 })
                             ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      case keep of wild {
                        GHC.Types.False
                        -> case System.Directory.removePathForcibly1
                                  ipv1
                                  ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                           (# ipv8, ipv7 #) }
                        GHC.Types.True -> ds4 } } }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ a
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case System.Directory.createDirectoryIfMissing3
                                (System.Directory.createDirectoryIfMissing_parents ipv1)
                                s1 of ds3 { (#,#) ipv4 ipv5 ->
                         case GHC.Prim.catch#
                                @ a
                                @ GHC.Exception.SomeException
                                (GHC.Prim.unmaskAsyncExceptions#
                                   @ a
                                   action
                                     `cast`
                                   (Nth:2
                                        (Trans
                                             (<GHC.Types.IO a>_R ->_R GHC.Types.N:IO[0] <a>_R)
                                             (GHC.Types.N:IO[0] <a>_R
                                              ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          a #)>_R))))
                                (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case keep of wild {
                                   GHC.Types.False
                                   -> case System.Directory.removePathForcibly1
                                             ipv1
                                             s2 of ds4 { (#,#) ipv6 ipv7 ->
                                      GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 ipv6 }
                                   GHC.Types.True
                                   -> GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 s2 })
                                ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                         case keep of wild {
                           GHC.Types.False
                           -> case System.Directory.removePathForcibly1
                                     ipv1
                                     ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                              (# ipv8, ipv7 #) }
                           GHC.Types.True -> ds4 } } })
                        ipv2
                   1#
                   -> case System.Directory.createDirectoryIfMissing3
                             (System.Directory.createDirectoryIfMissing_parents ipv1)
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.catch#
                             @ a
                             @ GHC.Exception.SomeException
                             (GHC.Prim.maskUninterruptible#
                                @ a
                                action
                                  `cast`
                                (Nth:2
                                     (Trans
                                          (<GHC.Types.IO a>_R ->_R GHC.Types.N:IO[0] <a>_R)
                                          (GHC.Types.N:IO[0] <a>_R
                                           ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       a #)>_R))))
                             (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                                (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case keep of wild {
                                GHC.Types.False
                                -> case System.Directory.removePathForcibly1
                                          ipv1
                                          s1 of ds4 { (#,#) ipv6 ipv7 ->
                                   GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 ipv6 }
                                GHC.Types.True
                                -> GHC.Prim.raiseIO# @ GHC.Exception.SomeException @ a e1 s1 })
                             ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      case keep of wild {
                        GHC.Types.False
                        -> case System.Directory.removePathForcibly1
                                  ipv1
                                  ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                           (# ipv8, ipv7 #) }
                        GHC.Types.True -> ds4 } } } } } }) -}
9993929e1e0a565da45e101720f2412e
  isolateWorkingDirectory7 :: [GHC.IO.FilePath]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.IO.FilePath
                   Util.isolateWorkingDirectory11
                   Util.isolateWorkingDirectory8) -}
6440a3e428909a640df258a1652a8391
  isolateWorkingDirectory8 :: [GHC.IO.FilePath]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.IO.FilePath
                   Util.isolateWorkingDirectory9
                   (GHC.Types.[] @ GHC.IO.FilePath)) -}
2d31ffdf26370e09a3e35c12d829532a
  isolateWorkingDirectory9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Util.isolateWorkingDirectory10) -}
115b9d42a70aac01a0169ce3173b7613
  isolatedRun ::
    Util.TestEnv
    -> GHC.Base.String
    -> (Util.TestEnv -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U(U(U),U,U,U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Util.TestEnv) (w1 :: GHC.Base.String) ->
                 case w of ww { Util.TestEnv ww1 ww2 ww3 ww4 ->
                 Util.$wisolatedRun ww1 ww2 ww3 ww4 w1 }) -}
6a47e9884de6a46a6e1088e5c058c99f
  isolatedRun1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.isolatedRun2) -}
b87eb623ef86e6f5eb96644df45156d7
  isolatedRun2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("exception"#) -}
48029e7cb6ff3efcbf30b746566cb875
  isolatedRun3 ::
    GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.Exception.SomeException a #)
  {- Arity: 2, Strictness: <L,C(U)><S,U>,
     Unfolding: (\ @ a
                   (action :: GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Either.Either GHC.Exception.SomeException a)
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.getMaskingState# ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case ipv3 of ds2 {
                   DEFAULT
                   -> case GHC.Prim.fork#
                             @ (GHC.Types.IO ())
                             (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              GHC.Prim.catch#
                                @ ()
                                @ GHC.Exception.SomeException
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.catch#
                                        @ (Data.Either.Either GHC.Exception.SomeException a)
                                        @ GHC.Exception.SomeException
                                        (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case GHC.Prim.maskAsyncExceptions#
                                                @ a
                                                action
                                                  `cast`
                                                (Nth:2
                                                     (Trans
                                                          (<GHC.Types.IO a>_R
                                                           ->_R GHC.Types.N:IO[0] <a>_R)
                                                          (GHC.Types.N:IO[0] <a>_R
                                                           ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       a #)>_R)))
                                                s2 of ds3 { (#,#) ipv4 ipv5 ->
                                         (# ipv4,
                                            Data.Either.Right
                                              @ GHC.Exception.SomeException
                                              @ a
                                              ipv5 #) })
                                        (Util.isolatedRun4 @ a)
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ (Data.Either.Either GHC.Exception.SomeException a)
                                        ipv1
                                        ipv5
                                        ipv4 of s2# { DEFAULT ->
                                 (# s2#, GHC.Tuple.() #) } })
                                GHC.Conc.Sync.forkIO2
                                eta)
                               `cast`
                             (Sym (GHC.Types.N:IO[0] <()>_R))
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      GHC.Prim.catch#
                        @ (Data.Either.Either GHC.Exception.SomeException a)
                        @ GHC.Exception.SomeException
                        (GHC.Prim.maskAsyncExceptions#
                           @ (Data.Either.Either GHC.Exception.SomeException a)
                           (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            GHC.Prim.readMVar#
                              @ GHC.Prim.RealWorld
                              @ (Data.Either.Either GHC.Exception.SomeException a)
                              ipv1
                              eta))
                        (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                           (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.killThread#
                                @ GHC.Exception.SomeException
                                ipv5
                                GHC.Conc.Sync.killThread2
                                s1 of s2 { DEFAULT ->
                         GHC.Prim.raiseIO#
                           @ GHC.Exception.SomeException
                           @ (Data.Either.Either GHC.Exception.SomeException a)
                           e1
                           s2 })
                        ipv4 }
                   0#
                   -> GHC.Prim.maskAsyncExceptions#
                        @ (Data.Either.Either GHC.Exception.SomeException a)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.fork#
                                @ (GHC.Types.IO ())
                                (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 GHC.Prim.catch#
                                   @ ()
                                   @ GHC.Exception.SomeException
                                   (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.catch#
                                           @ (Data.Either.Either GHC.Exception.SomeException a)
                                           @ GHC.Exception.SomeException
                                           (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                            case GHC.Prim.unmaskAsyncExceptions#
                                                   @ a
                                                   action
                                                     `cast`
                                                   (Nth:2
                                                        (Trans
                                                             (<GHC.Types.IO a>_R
                                                              ->_R GHC.Types.N:IO[0] <a>_R)
                                                             (GHC.Types.N:IO[0] <a>_R
                                                              ->_R <GHC.Prim.State#
                                                                      GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          a #)>_R)))
                                                   s3 of ds3 { (#,#) ipv4 ipv5 ->
                                            (# ipv4,
                                               Data.Either.Right
                                                 @ GHC.Exception.SomeException
                                                 @ a
                                                 ipv5 #) })
                                           (Util.isolatedRun4 @ a)
                                           s2 of ds3 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.putMVar#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.Either.Either GHC.Exception.SomeException a)
                                           ipv1
                                           ipv5
                                           ipv4 of s2# { DEFAULT ->
                                    (# s2#, GHC.Tuple.() #) } })
                                   GHC.Conc.Sync.forkIO2
                                   eta)
                                  `cast`
                                (Sym (GHC.Types.N:IO[0] <()>_R))
                                s1 of ds3 { (#,#) ipv4 ipv5 ->
                         GHC.Prim.catch#
                           @ (Data.Either.Either GHC.Exception.SomeException a)
                           @ GHC.Exception.SomeException
                           (GHC.Prim.unmaskAsyncExceptions#
                              @ (Data.Either.Either GHC.Exception.SomeException a)
                              (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               GHC.Prim.readMVar#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.Either.Either GHC.Exception.SomeException a)
                                 ipv1
                                 eta))
                           (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                              (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.killThread#
                                   @ GHC.Exception.SomeException
                                   ipv5
                                   GHC.Conc.Sync.killThread2
                                   s2 of s3 { DEFAULT ->
                            GHC.Prim.raiseIO#
                              @ GHC.Exception.SomeException
                              @ (Data.Either.Either GHC.Exception.SomeException a)
                              e1
                              s3 })
                           ipv4 })
                        ipv2
                   1#
                   -> case GHC.Prim.fork#
                             @ (GHC.Types.IO ())
                             (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                              GHC.Prim.catch#
                                @ ()
                                @ GHC.Exception.SomeException
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case GHC.Prim.catch#
                                        @ (Data.Either.Either GHC.Exception.SomeException a)
                                        @ GHC.Exception.SomeException
                                        (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                         case GHC.Prim.maskUninterruptible#
                                                @ a
                                                action
                                                  `cast`
                                                (Nth:2
                                                     (Trans
                                                          (<GHC.Types.IO a>_R
                                                           ->_R GHC.Types.N:IO[0] <a>_R)
                                                          (GHC.Types.N:IO[0] <a>_R
                                                           ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       a #)>_R)))
                                                s2 of ds3 { (#,#) ipv4 ipv5 ->
                                         (# ipv4,
                                            Data.Either.Right
                                              @ GHC.Exception.SomeException
                                              @ a
                                              ipv5 #) })
                                        (Util.isolatedRun4 @ a)
                                        s1 of ds3 { (#,#) ipv4 ipv5 ->
                                 case GHC.Prim.putMVar#
                                        @ GHC.Prim.RealWorld
                                        @ (Data.Either.Either GHC.Exception.SomeException a)
                                        ipv1
                                        ipv5
                                        ipv4 of s2# { DEFAULT ->
                                 (# s2#, GHC.Tuple.() #) } })
                                GHC.Conc.Sync.forkIO2
                                eta)
                               `cast`
                             (Sym (GHC.Types.N:IO[0] <()>_R))
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      GHC.Prim.catch#
                        @ (Data.Either.Either GHC.Exception.SomeException a)
                        @ GHC.Exception.SomeException
                        (GHC.Prim.maskUninterruptible#
                           @ (Data.Either.Either GHC.Exception.SomeException a)
                           (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            GHC.Prim.readMVar#
                              @ GHC.Prim.RealWorld
                              @ (Data.Either.Either GHC.Exception.SomeException a)
                              ipv1
                              eta))
                        (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                           (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.killThread#
                                @ GHC.Exception.SomeException
                                ipv5
                                GHC.Conc.Sync.killThread2
                                s1 of s2 { DEFAULT ->
                         GHC.Prim.raiseIO#
                           @ GHC.Exception.SomeException
                           @ (Data.Either.Either GHC.Exception.SomeException a)
                           e1
                           s2 })
                        ipv4 } } } }) -}
e16ccad3f8f3c8d18e2a719d5dba27c1
  isolatedRun4 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.Exception.SomeException a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta1,
                    Data.Either.Left @ GHC.Exception.SomeException @ a e1 #)) -}
b4bfb43e2ba7fb2317ecf9b742f0291e
  isolatedRun5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.isolatedRun6) -}
8a3ae54cdb99771284a92964da69cee6
  isolatedRun6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (".tmp"#) -}
c06552d1999a7cf571680e3261d24109
  isolatedRun7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dist/test-"#) -}
88532ce486d2fe46d3e62ac64ad45879
  modifyIORef' :: GHC.IORef.IORef a -> (a -> a) -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><C(S),1*C1(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.modifyIORef'1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.IORef.IORef a>_R
                 ->_R <a -> a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9ee73c9d7cb24ac479b503b4bf84d367
  modifyIORef'1 ::
    GHC.IORef.IORef a
    -> (a -> a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><C(S),1*C1(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (r :: GHC.IORef.IORef a)
                   (f :: a -> a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case r `cast`
                      (Nth:2
                           (Trans
                                (<GHC.IORef.IORef a>_R ->_R GHC.Types.N:IO[0] <a>_R)
                                (GHC.IORef.N:IORef[0] <a>_N
                                 ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             a #)>_R))) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ a
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case f ipv1 of x' { DEFAULT ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ a
                        var#
                        x'
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } } }) -}
b91d3ed15516b52cf59dd07607bec671
  parseArgs ::
    [GHC.Base.String] -> [(GHC.Base.String, GHC.Base.String)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [[GHC.Types.Char]]) ->
                 GHC.List.reverse1
                   @ (GHC.Base.String, GHC.Base.String)
                   (GHC.Base.build
                      @ (GHC.Base.String, GHC.Base.String)
                      (\ @ b1
                         (c :: (GHC.Base.String, GHC.Base.String) -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ [GHC.Types.Char]
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.String, GHC.Base.String)
                            @ b1
                            @ [GHC.Types.Char]
                            c
                            Util.parseArgs1)
                         n
                         x))
                   (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
354b301309a973870e0b17a4071e7029
  parseArgs1 ::
    [GHC.Types.Char] -> (GHC.Base.String, GHC.Base.String)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Char]) ->
                 let {
                   ds :: (GHC.Base.String, [GHC.Types.Char])
                   = case GHC.List.$wspan
                            @ GHC.Types.Char
                            Util.parseArgs2
                            w of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (case ds of wild { (,) x y -> x },
                  case ds of wild { (,) x y ->
                  Util.$wunsafeDrop @ GHC.Types.Char 1# y })) -}
dd35d85761da313e4d503c55e93020cb
  parseArgs2 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 case ds of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True '='# -> GHC.Types.False } }) -}
89dea3f991eac37f2ee1665a4e949199
  preprocessPathRecursive ::
    (GHC.IO.FilePath -> GHC.Types.IO ())
    -> GHC.IO.FilePath -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,C(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.preprocessPathRecursive1
                  `cast`
                (<GHC.IO.FilePath -> GHC.Types.IO ()>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
638bcd1f4b904ef64896e3b45f482d15
  preprocessPathRecursive1 ::
    (GHC.IO.FilePath -> GHC.Types.IO ())
    -> GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,C(C1(U(U,U)))><L,U><S,U> -}
f750956f3ed548d9d3d59ea92e237eea
  printErr :: [GHC.Base.String] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.check4
                  `cast`
                (<[GHC.Base.String]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
308e751e8c5f96dfc304b9dcdbf482c7
  printFailure ::
    Util.TestEnv -> [GHC.Base.String] -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(S(S)LLL),1*U(1*U(U),A,A,A)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.printFailure1
                  `cast`
                (<Util.TestEnv>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
24b379e387f339a8b56989dd9f4c34f8
  printFailure1 ::
    Util.TestEnv
    -> [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(S(S)LLL),1*U(1*U(U),A,A,A)><L,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: Util.TestEnv)
                   (msg :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild { Util.TestEnv ds1 ds2 ds3 ds4 ->
                 case ds1
                        `cast`
                      (Nth:2
                           (Trans
                                (<GHC.IORef.IORef GHC.Types.Int>_R
                                 ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                 ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             GHC.Types.Int #)>_R))) of wild1 { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        var#
                        eta of ds5 { (#,#) ipv ipv1 ->
                 case ipv1 of wild2 { GHC.Types.I# x ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        var#
                        (GHC.Types.I# (GHC.Prim.+# x 1#))
                        ipv of s2# { DEFAULT ->
                 Util.check4 msg s2# } } } } }) -}
af5eab0dcc15e8734546a97a2715e770
  printInfo :: Util.TestEnv -> [GHC.Base.String] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S(LSLL),1*U(A,1*U,A,A)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.inform2
                  `cast`
                (<Util.TestEnv>_R
                 ->_R <[GHC.Base.String]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7fc7aa39ea777808950f951708bce445
  readArg ::
    GHC.Read.Read a =>
    Util.TestEnv -> GHC.Base.String -> GHC.Base.String -> a -> a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A,A)><S(LLLS),1*U(A,A,A,1*U)><L,U><L,U><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (eta :: Util.TestEnv)
                   (eta1 :: GHC.Base.String)
                   (eta2 :: GHC.Base.String)
                   (eta3 :: a) ->
                 Util.getArg @ a (Util.tryRead @ a $dRead) eta eta1 eta2 eta3) -}
ec1366a63806b85545837165235f669d
  readBool :: GHC.Base.String -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 1, Strictness: <L,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 GHC.Base.Just
                   @ GHC.Types.Bool
                   (case GHC.Base.map
                           @ GHC.Types.Char
                           @ GHC.Types.Char
                           GHC.Unicode.toLower
                           w of wild {
                      [] -> GHC.Types.False
                      : ds ds1
                      -> case ds of wild1 { GHC.Types.C# ds2 ->
                         case ds2 of ds3 {
                           DEFAULT -> GHC.Types.False
                           't'# -> GHC.Types.True
                           'y'# -> GHC.Types.True } } })) -}
b1e312d0a35f6f946f9501e9e24376f9
  run ::
    Util.TestEnv
    -> GHC.Base.String
    -> (Util.TestEnv -> GHC.Types.IO ())
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,U(U(U),U,U,U)><L,U><L,1*C1(C(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.run1
                  `cast`
                (<Util.TestEnv>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Util.TestEnv -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3cdf0efcfd6d770e962c25829ed7be0d
  run1 ::
    Util.TestEnv
    -> GHC.Base.String
    -> (Util.TestEnv -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(U(U),U,U,U)><L,U><L,1*C1(C(U))><S,U>,
     Unfolding: (\ (t :: Util.TestEnv)
                   (name :: GHC.Base.String)
                   (action :: Util.TestEnv -> GHC.Types.IO ())
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Util.isolatedRun3 @ () (action t) s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e
                   -> case t of wild1 { Util.TestEnv ds ds2 ds3 ds4 ->
                      case ds
                             `cast`
                           (Nth:2
                                (Trans
                                     (<GHC.IORef.IORef GHC.Types.Int>_R
                                      ->_R GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                                     (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  GHC.Types.Int #)>_R))) of wild2 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild3 { GHC.Types.I# x ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             var#
                             (GHC.Types.I# (GHC.Prim.+# x 1#))
                             ipv2 of s2# { DEFAULT ->
                      Util.check4
                        (GHC.Types.:
                           @ [GHC.Types.Char]
                           name
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              Util.isolatedRun1
                              (GHC.Types.:
                                 @ [GHC.Types.Char]
                                 (GHC.Exception.$fShowSomeException_$cshow e)
                                 (GHC.Types.[] @ [GHC.Types.Char]))))
                        s2# } } } } }
                   Data.Either.Right ds
                   -> case ds of wild1 { () -> (# ipv, GHC.Tuple.() #) } } }) -}
51dbc8efd3a480dd6a241944f80af385
  showContext ::
    GHC.Show.Show a =>
    GHC.Base.String -> GHC.Integer.Type.Integer -> a -> GHC.Base.String
  {- Arity: 4, Strictness: <L,1*U(A,1*C1(U),A)><S,1*U><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (file :: GHC.Base.String)
                   (line :: GHC.Integer.Type.Integer)
                   (context :: a) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   file
                   (GHC.CString.unpackAppendCString#
                      Util.showContext2
                      (case GHC.Show.$w$cshowsPrec4
                              0#
                              line
                              (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         (GHC.Types.: @ GHC.Types.Char ww3 ww4)
                         (let {
                            ds :: [GHC.Types.Char] = GHC.Show.show @ a $dShow context
                          } in
                          case GHC.Base.eqString ds Util.showContext4 of wild {
                            GHC.Types.False
                            -> GHC.CString.unpackAppendCString# Util.showContext2 ds
                            GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }) }))) -}
c2ad06554a8fe6d9461e62af81a014ad
  showContext1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Util.showContext2
                   GHC.Show.$fShow()1) -}
ce17847c2200711c803aeb91591241ba
  showContext2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (":"#) -}
6c5c5a22714f8591fcb681cf2bff0abc
  showContext3 :: GHC.Types.Bool
  {- Unfolding: (GHC.Base.eqString
                   GHC.Show.$fShow()1
                   Util.showContext4) -}
621ecc94f5077662f51512375b2f30e8
  showContext4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.showContext5) -}
f543d8ee053cb10c658abc9419cb5cb7
  showContext5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("()"#) -}
871626d6a6941872a6390e80b661f4ff
  showContext_$sshowContext ::
    GHC.Base.String
    -> GHC.Integer.Type.Integer -> () -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,1*H>,
     Unfolding: (\ (file :: GHC.Base.String)
                   (line :: GHC.Integer.Type.Integer)
                   (context :: ()) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   file
                   (GHC.CString.unpackAppendCString#
                      Util.showContext2
                      (case GHC.Show.$w$cshowsPrec4
                              0#
                              line
                              (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         (GHC.Types.: @ GHC.Types.Char ww3 ww4)
                         (case context of wild { () ->
                          case Util.showContext3 of wild1 {
                            GHC.Types.False -> Util.showContext1
                            GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char } }) }))) -}
a2cda7416f6d830e42cdb7d432cd2a75
  testArgs :: Util.TestEnv -> [(GHC.Base.String, GHC.Base.String)]
  RecSel Left Util.TestEnv
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Util.TestEnv) ->
                 case ds of wild { Util.TestEnv ds1 ds2 ds3 ds4 -> ds4 }) -}
a2cda7416f6d830e42cdb7d432cd2a75
  testCounter :: Util.TestEnv -> GHC.IORef.IORef GHC.Types.Int
  RecSel Left Util.TestEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Util.TestEnv) ->
                 case ds of wild { Util.TestEnv ds1 ds2 ds3 ds4 -> ds1 }) -}
a2cda7416f6d830e42cdb7d432cd2a75
  testKeepDirs :: Util.TestEnv -> GHC.Types.Bool
  RecSel Left Util.TestEnv
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Util.TestEnv) ->
                 case ds of wild { Util.TestEnv ds1 ds2 ds3 ds4 -> ds3 }) -}
a9cda545ef8d120498bfe3d8778626fc
  testMain :: (Util.TestEnv -> GHC.Types.IO ()) -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,1*C1(C1(U(U,A)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.testMain1
                  `cast`
                (<Util.TestEnv -> GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8349ce576e091486a7203743155a49b4
  testMain1 ::
    (Util.TestEnv -> GHC.Types.IO ())
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,1*C1(C1(U(U,A)))><S,U>,
     Unfolding: (\ (action :: Util.TestEnv -> GHC.Types.IO ())
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.newMutVar#
                        @ GHC.Types.Int
                        @ GHC.Prim.RealWorld
                        Util.testMain13
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case (action
                         (let {
                            ipv4 :: [(GHC.Base.String, GHC.Base.String)]
                            = GHC.List.reverse1
                                @ (GHC.Base.String, GHC.Base.String)
                                (GHC.Base.map
                                   @ [GHC.Types.Char]
                                   @ (GHC.Base.String, GHC.Base.String)
                                   Util.parseArgs1
                                   ipv1)
                                (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))
                          } in
                          Util.TestEnv
                            (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                              `cast`
                            (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N)
                            (case GHC.List.lookup
                                    @ [GHC.Types.Char]
                                    @ GHC.Base.String
                                    GHC.Classes.$fEq[]_$s$fEq[]1
                                    Util.testMain9
                                    ipv4 of wild {
                               GHC.Base.Nothing -> GHC.Types.False
                               GHC.Base.Just x
                               -> case GHC.Base.map
                                         @ GHC.Types.Char
                                         @ GHC.Types.Char
                                         GHC.Unicode.toLower
                                         x of wild1 {
                                    [] -> GHC.Types.False
                                    : ds2 ds3
                                    -> case ds2 of wild2 { GHC.Types.C# ds4 ->
                                       case ds4 of ds5 {
                                         DEFAULT -> GHC.Types.False
                                         't'# -> GHC.Types.True
                                         'y'# -> GHC.Types.True } } } })
                            (case GHC.List.lookup
                                    @ [GHC.Types.Char]
                                    @ GHC.Base.String
                                    GHC.Classes.$fEq[]_$s$fEq[]1
                                    Util.testMain5
                                    ipv4 of wild {
                               GHC.Base.Nothing -> GHC.Types.False
                               GHC.Base.Just x
                               -> case GHC.Base.map
                                         @ GHC.Types.Char
                                         @ GHC.Types.Char
                                         GHC.Unicode.toLower
                                         x of wild1 {
                                    [] -> GHC.Types.False
                                    : ds2 ds3
                                    -> case ds2 of wild2 { GHC.Types.C# ds4 ->
                                       case ds4 of ds5 {
                                         DEFAULT -> GHC.Types.False
                                         't'# -> GHC.Types.True
                                         'y'# -> GHC.Types.True } } } })
                            ipv4))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv3
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case ipv7 of wild { GHC.Types.I# x ->
                 case x of wild1 {
                   DEFAULT
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString#
                                Util.testMain4
                                (case GHC.Show.$wshowSignedInt
                                        0#
                                        wild1
                                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Base.++
                                   @ GHC.Types.Char
                                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                   Util.testMain2 }))
                             GHC.Types.True
                             ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                      case GHC.IO.Handle.Internals.wantWritableHandle1
                             @ ()
                             GHC.IO.Handle.hFlush2
                             GHC.IO.Handle.FD.stdout
                             GHC.IO.Handle.Internals.flushWriteBuffer1
                               `cast`
                             (<GHC.IO.Handle.Types.Handle__>_R
                              ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                             ipv8 of ds5 { (#,#) ipv10 ipv11 ->
                      System.Exit.exitFailure1 @ () ipv10 } }
                   0# -> (# ipv6, GHC.Tuple.() #) } } } } } }) -}
871f95a067d157f5728e8906b44155fe
  testMain10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.testMain11) -}
2269df1ece89130074dad1dd67135055
  testMain11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("silent"#) -}
f6f74eb100fe8ef9288a78b82ad97dda
  testMain12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Util.getArg1
                   Util.testMain10) -}
087b9e900fae5ac018d0edac60727f50
  testMain13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
362a751c438657ecf1520589ac5d41cf
  testMain2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.testMain3) -}
f81ea80ba57d17cab68a74f2a7272ae1
  testMain3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" failures]"#) -}
9b3cb92a475d31de3a1917127e6079fa
  testMain4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("["#) -}
6d57da6f0cf2da234a4d61c811608af2
  testMain5 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Base.eqString
                        (GHC.Types.[] @ GHC.Types.Char)
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        Util.testMain8
                   GHC.Types.True -> Util.testMain6 }) -}
db279730afd3295625329bb1a2945f66
  testMain6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.testMain7) -}
7e3c083f2a5baba2fdccb50911e71a7e
  testMain7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("keep-dirs"#) -}
2c4fb7a7ab80d388b3125bce5222471a
  testMain8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Util.getArg1
                   Util.testMain6) -}
bc1b933f7eab38f8bde3af7278b8092d
  testMain9 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Base.eqString
                        (GHC.Types.[] @ GHC.Types.Char)
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        Util.testMain12
                   GHC.Types.True -> Util.testMain10 }) -}
a2cda7416f6d830e42cdb7d432cd2a75
  testSilent :: Util.TestEnv -> GHC.Types.Bool
  RecSel Left Util.TestEnv
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Util.TestEnv) ->
                 case ds of wild { Util.TestEnv ds1 ds2 ds3 ds4 -> ds2 }) -}
8ae0b7bb4fe3b1b512cdb1c96364cc11
  timeLimit :: GHC.Types.Double -> GHC.Types.IO a -> GHC.Types.IO a
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.timeLimit1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.Double>_R
                 ->_R <GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
9fe3c46a365a71b6765213068783e2c5
  timeLimit1 ::
    GHC.Types.Double
    -> GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*C1(U(U,U))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Types.Double)
                   (w1 :: GHC.Types.IO a)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 Util.$wtimeLimit @ a ww1 w1 w2 }) -}
d151b60e7d28ad74a3142c6a7e52eefe
  timeLimit2 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Util.timeLimit3) -}
7328539ede400e5fe08b7f879e89b581
  timeLimit3 :: GHC.IO.Exception.IOException
  {- Strictness: m,
     Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   Util.timeLimit4
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
a34b3abd8f388f9c27dbb5176cd89d79
  timeLimit4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Util.timeLimit5) -}
839117c8f619e46006e63e091ddcbf1c
  timeLimit5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("timed out"#) -}
6ab6bb1dc38867bb256fd02eb72ad0ea
  tryAny ::
    GHC.Types.IO a
    -> GHC.Types.IO (Data.Either.Either GHC.Exception.SomeException a)
  {- Arity: 2, Strictness: <L,C(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.isolatedRun3
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either GHC.Exception.SomeException a>_R)) -}
4c088bec9962bd57a5dc7729134f9d31
  tryRead :: GHC.Read.Read a => GHC.Base.String -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))LLL),1*U(1*C1(C1(U)),A,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (s :: GHC.Base.String) ->
                 case GHC.Read.readsPrec
                        @ a
                        $dRead
                        Text.ParserCombinators.ReadPrec.minPrec
                        s of wild {
                   [] -> GHC.Base.Nothing @ a
                   : ds ds1
                   -> case ds of wild1 { (,) x ds2 ->
                      case ds2 of wild2 {
                        []
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Just @ a x : ipv ipv1 -> GHC.Base.Nothing @ a }
                        : ipv ipv1 -> GHC.Base.Nothing @ a } } }) -}
f9ee7caa8e363b6b72cdd0fcb940a610
  withNewDirectory ::
    GHC.Types.Bool
    -> GHC.IO.FilePath -> GHC.Types.IO a -> GHC.Types.IO a
  {- Arity: 4, Strictness: <L,U><L,U><L,C(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Util.isolateWorkingDirectory6
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.Bool>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
"SPEC showContext @ ()" forall ($dShow :: GHC.Show.Show ())
  Util.showContext @ () $dShow = Util.showContext_$sshowContext
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

