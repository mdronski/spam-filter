Configuring conduit-1.2.12.1...
Preprocessing library for conduit-1.2.12.1..
Building library for conduit-1.2.12.1..
[1 of 8] Compiling Data.Conduit.Internal.Pipe ( Data/Conduit/Internal/Pipe.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Data/Conduit/Internal/Pipe.o )

Data/Conduit/Internal/Pipe.hs:228:11: warning: [-Winline-rule-shadowing]
    Rule "conduit: CI.await >>= maybe" may never fire
      because ‘maybe’ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for ‘maybe’
    |
228 | {-# RULES "conduit: CI.await >>= maybe" forall x y. await >>= maybe x y = NeedInput y (const x) #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data/Conduit/Internal/Pipe.hs:237:11: warning: [-Winline-rule-shadowing]
    Rule "conduit: awaitE >>= either" may never fire
      because ‘either’ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for ‘either’
    |
237 | {-# RULES "conduit: awaitE >>= either" forall x y. awaitE >>= either x y = NeedInput y x #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data/Conduit/Internal/Pipe.hs:279:5: warning: [-Winline-rule-shadowing]
    Rule "lift m >>= CI.yield" may never fire
      because ‘lift’ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for ‘lift’
    |
279 |   ; "lift m >>= CI.yield" forall m. lift m >>= yield = yieldM m
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data/Conduit/Internal/Pipe.hs:640:11: warning: [-Winline-rule-shadowing]
    Rule "conduit: Pipe: lift x >>= f" may never fire
      because ‘lift’ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for ‘lift’
    |
640 | {-# RULES "conduit: Pipe: lift x >>= f" forall m f. lift m >>= f = PipeM (liftM f m) #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data/Conduit/Internal/Pipe.hs:641:11: warning: [-Winline-rule-shadowing]
    Rule "conduit: Pipe: lift x >> f" may never fire
      because ‘lift’ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for ‘lift’
    |
641 | {-# RULES "conduit: Pipe: lift x >> f" forall m f. lift m >> f = PipeM (liftM (\_ -> f) m) #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[2 of 8] Compiling Data.Conduit.Internal.Conduit ( Data/Conduit/Internal/Conduit.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Data/Conduit/Internal/Conduit.o )

Data/Conduit/Internal/Conduit.hs:89:1: warning: [-Wdodgy-imports]
    Module ‘Prelude’ does not export ‘catch’
   |
89 | import Prelude hiding (catch)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data/Conduit/Internal/Conduit.hs:873:11: warning: [-Winline-rule-shadowing]
    Rule "conduit: await >>= maybe" may never fire
      because ‘maybe’ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for ‘maybe’
    |
873 | {-# RULES "conduit: await >>= maybe" forall x y. await >>= maybe x y = await' x y #-}
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[3 of 8] Compiling Data.Conduit.Internal.Fusion ( Data/Conduit/Internal/Fusion.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Data/Conduit/Internal/Fusion.o )
[4 of 8] Compiling Data.Conduit.Internal.List.Stream ( Data/Conduit/Internal/List/Stream.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Data/Conduit/Internal/List/Stream.o )
[5 of 8] Compiling Data.Conduit     ( Data/Conduit.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Data/Conduit.o )
[6 of 8] Compiling Data.Conduit.Internal ( Data/Conduit/Internal.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Data/Conduit/Internal.o )
[7 of 8] Compiling Data.Conduit.Lift ( Data/Conduit/Lift.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Data/Conduit/Lift.o )

Data/Conduit/Lift.hs:84:1: warning: [-Wdeprecations]
    Module ‘Control.Monad.Trans.Error’ is deprecated:
      Use Control.Monad.Trans.Except instead
   |
84 | import qualified Control.Monad.Trans.Error as E
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data/Conduit/Lift.hs:188:26: warning: [-Wdeprecations]
    In the use of type constructor or class ‘ErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
188 |   :: (Monad m, Monad (t (E.ErrorT e m)), MonadTrans t, E.Error e,
    |                          ^^^^^^^^

Data/Conduit/Lift.hs:188:56: warning: [-Wdeprecations]
    In the use of type constructor or class ‘Error’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
188 |   :: (Monad m, Monad (t (E.ErrorT e m)), MonadTrans t, E.Error e,
    |                                                        ^^^^^^^

Data/Conduit/Lift.hs:190:29: warning: [-Wdeprecations]
    In the use of type constructor or class ‘ErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
190 |      t m (Either e b) -> t (E.ErrorT e m) b
    |                             ^^^^^^^^

Data/Conduit/Lift.hs:193:12: warning: [-Wdeprecations]
    In the use of data constructor ‘ErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
193 |     lift $ E.ErrorT (return x)
    |            ^^^^^^^^

Data/Conduit/Lift.hs:199:16: warning: [-Wdeprecations]
    In the use of type constructor or class ‘Error’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
199 |   :: (Monad m, E.Error e) =>
    |                ^^^^^^^

Data/Conduit/Lift.hs:200:20: warning: [-Wdeprecations]
    In the use of type constructor or class ‘ErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
200 |      ConduitM i o (E.ErrorT e m) r -> ConduitM i o m (Either e r)
    |                    ^^^^^^^^

Data/Conduit/Lift.hs:205:25: warning: [-Wdeprecations]
    In the use of ‘runErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
205 |                 eres <- E.runErrorT mp
    |                         ^^^^^^^^^^^

Data/Conduit/Lift.hs:210:56: warning: [-Wdeprecations]
    In the use of ‘runErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
210 |             go (HaveOutput p f o) = HaveOutput (go p) (E.runErrorT f >> return ()) o
    |                                                        ^^^^^^^^^^^

Data/Conduit/Lift.hs:219:16: warning: [-Wdeprecations]
    In the use of type constructor or class ‘Error’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
219 |   :: (Monad m, E.Error e) =>
    |                ^^^^^^^

Data/Conduit/Lift.hs:220:20: warning: [-Wdeprecations]
    In the use of type constructor or class ‘ErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
220 |      ConduitM i o (E.ErrorT e m) r
    |                    ^^^^^^^^

Data/Conduit/Lift.hs:221:29: warning: [-Wdeprecations]
    In the use of type constructor or class ‘ErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
221 |      -> (e -> ConduitM i o (E.ErrorT e m) r)
    |                             ^^^^^^^^

Data/Conduit/Lift.hs:222:23: warning: [-Wdeprecations]
    In the use of type constructor or class ‘ErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
222 |      -> ConduitM i o (E.ErrorT e m) r
    |                       ^^^^^^^^

Data/Conduit/Lift.hs:227:32: warning: [-Wdeprecations]
    In the use of ‘runErrorT’
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
227 |                 eres <- lift $ E.runErrorT mp
    |                                ^^^^^^^^^^^
[8 of 8] Compiling Data.Conduit.List ( Data/Conduit/List.hs, .stack-work/dist/x86_64-linux/Cabal-2.0.1.0/build/Data/Conduit/List.o )
Installing library in /home/mdronski/.stack/snapshots/x86_64-linux/lts-10.0/8.2.2/lib/x86_64-linux-ghc-8.2.2/conduit-1.2.12.1-FLnxUmc38QrA4uH7Dp5lmD
Registering library for conduit-1.2.12.1..
