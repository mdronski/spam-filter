Configuring conduit-1.2.12.1...
Preprocessing library for conduit-1.2.12.1..
Building library for conduit-1.2.12.1..
[1 of 8] Compiling Data.Conduit.Internal.Pipe ( Data/Conduit/Internal/Pipe.hs, .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/Data/Conduit/Internal/Pipe.o )

[;1mData/Conduit/Internal/Pipe.hs:228:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "conduit: CI.await >>= maybe" may never fire
      because â€˜maybeâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜maybeâ€™[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m228 |[0m[0m {-# RULES [;1m[35m"conduit: CI.await >>= maybe" forall x y. await >>= maybe x y = NeedInput y (const x)[0m[0m #-}
[;1m[34m    |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Internal/Pipe.hs:237:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "conduit: awaitE >>= either" may never fire
      because â€˜eitherâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜eitherâ€™[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m237 |[0m[0m {-# RULES [;1m[35m"conduit: awaitE >>= either" forall x y. awaitE >>= either x y = NeedInput y x[0m[0m #-}
[;1m[34m    |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Internal/Pipe.hs:279:5: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "lift m >>= CI.yield" may never fire
      because â€˜liftâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜liftâ€™[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m279 |[0m[0m   ; [;1m[35m"lift m >>= CI.yield" forall m. lift m >>= yield = yieldM m[0m[0m
[;1m[34m    |[0m[0m[;1m[35m     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Internal/Pipe.hs:640:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "conduit: Pipe: lift x >>= f" may never fire
      because â€˜liftâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜liftâ€™[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m640 |[0m[0m {-# RULES [;1m[35m"conduit: Pipe: lift x >>= f" forall m f. lift m >>= f = PipeM (liftM f m)[0m[0m #-}
[;1m[34m    |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Internal/Pipe.hs:641:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "conduit: Pipe: lift x >> f" may never fire
      because â€˜liftâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜liftâ€™[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m641 |[0m[0m {-# RULES [;1m[35m"conduit: Pipe: lift x >> f" forall m f. lift m >> f = PipeM (liftM (\_ -> f) m)[0m[0m #-}
[;1m[34m    |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m[2 of 8] Compiling Data.Conduit.Internal.Conduit ( Data/Conduit/Internal/Conduit.hs, .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/Data/Conduit/Internal/Conduit.o )

[;1mData/Conduit/Internal/Conduit.hs:89:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdodgy-imports[0m[0m[;1m][0m[0m[;1m
    Module â€˜Preludeâ€™ does not export â€˜catchâ€™[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m89 |[0m[0m [;1m[35mimport Prelude hiding (catch)[0m[0m
[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Internal/Conduit.hs:873:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Winline-rule-shadowing[0m[0m[;1m][0m[0m[;1m
    Rule "conduit: await >>= maybe" may never fire
      because â€˜maybeâ€™ might inline first
    Probable fix: add an INLINE[n] or NOINLINE[n] pragma for â€˜maybeâ€™[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m873 |[0m[0m {-# RULES [;1m[35m"conduit: await >>= maybe" forall x y. await >>= maybe x y = await' x y[0m[0m #-}
[;1m[34m    |[0m[0m[;1m[35m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m[3 of 8] Compiling Data.Conduit.Internal.Fusion ( Data/Conduit/Internal/Fusion.hs, .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/Data/Conduit/Internal/Fusion.o )
[4 of 8] Compiling Data.Conduit.Internal.List.Stream ( Data/Conduit/Internal/List/Stream.hs, .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/Data/Conduit/Internal/List/Stream.o )
[5 of 8] Compiling Data.Conduit     ( Data/Conduit.hs, .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/Data/Conduit.o )
[6 of 8] Compiling Data.Conduit.Internal ( Data/Conduit/Internal.hs, .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/Data/Conduit/Internal.o )
[7 of 8] Compiling Data.Conduit.Lift ( Data/Conduit/Lift.hs, .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/Data/Conduit/Lift.o )

[;1mData/Conduit/Lift.hs:84:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    Module â€˜Control.Monad.Trans.Errorâ€™ is deprecated:
      Use Control.Monad.Trans.Except instead[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m84 |[0m[0m [;1m[35mimport qualified Control.Monad.Trans.Error as E[0m[0m
[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:188:26: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m188 |[0m[0m   :: (Monad m, Monad (t ([;1m[35mE.ErrorT[0m[0m e m)), MonadTrans t, E.Error e,
[;1m[34m    |[0m[0m[;1m[35m                          ^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:188:56: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜Errorâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m188 |[0m[0m   :: (Monad m, Monad (t (E.ErrorT e m)), MonadTrans t, [;1m[35mE.Error[0m[0m e,
[;1m[34m    |[0m[0m[;1m[35m                                                        ^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:190:29: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m190 |[0m[0m      t m (Either e b) -> t ([;1m[35mE.ErrorT[0m[0m e m) b
[;1m[34m    |[0m[0m[;1m[35m                             ^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:193:12: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of data constructor â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m193 |[0m[0m     lift $ [;1m[35mE.ErrorT[0m[0m (return x)
[;1m[34m    |[0m[0m[;1m[35m            ^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:199:16: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜Errorâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m199 |[0m[0m   :: (Monad m, [;1m[35mE.Error[0m[0m e) =>
[;1m[34m    |[0m[0m[;1m[35m                ^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:200:20: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m200 |[0m[0m      ConduitM i o ([;1m[35mE.ErrorT[0m[0m e m) r -> ConduitM i o m (Either e r)
[;1m[34m    |[0m[0m[;1m[35m                    ^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:205:25: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of â€˜runErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m205 |[0m[0m                 eres <- [;1m[35mE.runErrorT[0m[0m mp
[;1m[34m    |[0m[0m[;1m[35m                         ^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:210:56: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of â€˜runErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m210 |[0m[0m             go (HaveOutput p f o) = HaveOutput (go p) ([;1m[35mE.runErrorT[0m[0m f >> return ()) o
[;1m[34m    |[0m[0m[;1m[35m                                                        ^^^^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:219:16: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜Errorâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m219 |[0m[0m   :: (Monad m, [;1m[35mE.Error[0m[0m e) =>
[;1m[34m    |[0m[0m[;1m[35m                ^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:220:20: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m220 |[0m[0m      ConduitM i o ([;1m[35mE.ErrorT[0m[0m e m) r
[;1m[34m    |[0m[0m[;1m[35m                    ^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:221:29: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m221 |[0m[0m      -> (e -> ConduitM i o ([;1m[35mE.ErrorT[0m[0m e m) r)
[;1m[34m    |[0m[0m[;1m[35m                             ^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:222:23: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m222 |[0m[0m      -> ConduitM i o ([;1m[35mE.ErrorT[0m[0m e m) r
[;1m[34m    |[0m[0m[;1m[35m                       ^^^^^^^^[0m[0m
[0m[0m[0m
[;1mData/Conduit/Lift.hs:227:32: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wdeprecations[0m[0m[;1m][0m[0m[;1m
    In the use of â€˜runErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"[0m[0m
[;1m[34m    |[0m[0m
[;1m[34m227 |[0m[0m                 eres <- lift $ [;1m[35mE.runErrorT[0m[0m mp
[;1m[34m    |[0m[0m[;1m[35m                                ^^^^^^^^^^^[0m[0m
[0m[0m[0m[8 of 8] Compiling Data.Conduit.List ( Data/Conduit/List.hs, .stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/build/Data/Conduit/List.o )
Preprocessing library for conduit-1.2.12.1..
Running Haddock on library for conduit-1.2.12.1..

Data/Conduit/Internal/Conduit.hs:89:1: warning: [-Wdodgy-imports]
    Module â€˜Preludeâ€™ does not export â€˜catchâ€™
   |
89 | import Prelude hiding (catch)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data/Conduit/Lift.hs:84:1: warning: [-Wdeprecations]
    Module â€˜Control.Monad.Trans.Errorâ€™ is deprecated:
      Use Control.Monad.Trans.Except instead
   |
84 | import qualified Control.Monad.Trans.Error as E
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Data/Conduit/Lift.hs:188:26: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
188 |   :: (Monad m, Monad (t (E.ErrorT e m)), MonadTrans t, E.Error e,
    |                          ^^^^^^^^

Data/Conduit/Lift.hs:188:56: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜Errorâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
188 |   :: (Monad m, Monad (t (E.ErrorT e m)), MonadTrans t, E.Error e,
    |                                                        ^^^^^^^

Data/Conduit/Lift.hs:190:29: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
190 |      t m (Either e b) -> t (E.ErrorT e m) b
    |                             ^^^^^^^^

Data/Conduit/Lift.hs:193:12: warning: [-Wdeprecations]
    In the use of data constructor â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
193 |     lift $ E.ErrorT (return x)
    |            ^^^^^^^^

Data/Conduit/Lift.hs:199:16: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜Errorâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
199 |   :: (Monad m, E.Error e) =>
    |                ^^^^^^^

Data/Conduit/Lift.hs:200:20: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
200 |      ConduitM i o (E.ErrorT e m) r -> ConduitM i o m (Either e r)
    |                    ^^^^^^^^

Data/Conduit/Lift.hs:205:25: warning: [-Wdeprecations]
    In the use of â€˜runErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
205 |                 eres <- E.runErrorT mp
    |                         ^^^^^^^^^^^

Data/Conduit/Lift.hs:210:56: warning: [-Wdeprecations]
    In the use of â€˜runErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
210 |             go (HaveOutput p f o) = HaveOutput (go p) (E.runErrorT f >> return ()) o
    |                                                        ^^^^^^^^^^^

Data/Conduit/Lift.hs:219:16: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜Errorâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
219 |   :: (Monad m, E.Error e) =>
    |                ^^^^^^^

Data/Conduit/Lift.hs:220:20: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
220 |      ConduitM i o (E.ErrorT e m) r
    |                    ^^^^^^^^

Data/Conduit/Lift.hs:221:29: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
221 |      -> (e -> ConduitM i o (E.ErrorT e m) r)
    |                             ^^^^^^^^

Data/Conduit/Lift.hs:222:23: warning: [-Wdeprecations]
    In the use of type constructor or class â€˜ErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
222 |      -> ConduitM i o (E.ErrorT e m) r
    |                       ^^^^^^^^

Data/Conduit/Lift.hs:227:32: warning: [-Wdeprecations]
    In the use of â€˜runErrorTâ€™
    (imported from Control.Monad.Trans.Error):
    Deprecated: "Use Control.Monad.Trans.Except instead"
    |
227 |                 eres <- lift $ E.runErrorT mp
    |                                ^^^^^^^^^^^
Haddock coverage:
  91% ( 32 / 35) in 'Data.Conduit.Internal.Pipe'
  Missing documentation for:
    Module header
    yieldM (Data/Conduit/Internal/Pipe.hs:261)
    enumFromTo (Data/Conduit/Internal/Pipe.hs:510)
  95% ( 71 / 75) in 'Data.Conduit.Internal.Conduit'
  Missing documentation for:
    Module header
    sourceToPipe (Data/Conduit/Internal/Conduit.hs:342)
    sinkToPipe (Data/Conduit/Internal/Conduit.hs:352)
    conduitToPipe (Data/Conduit/Internal/Conduit.hs:362)
  19% (  3 / 16) in 'Data.Conduit.Internal.Fusion'
  Missing documentation for:
    Module header
    Stream (Data/Conduit/Internal/Fusion.hs:37)
    ConduitWithStream (Data/Conduit/Internal/Fusion.hs:41)
    StreamConduitM (Data/Conduit/Internal/Fusion.hs:45)
    StreamConduit (Data/Conduit/Internal/Fusion.hs:47)
    StreamSource (Data/Conduit/Internal/Fusion.hs:49)
    StreamProducer (Data/Conduit/Internal/Fusion.hs:51)
    StreamSink (Data/Conduit/Internal/Fusion.hs:53)
    StreamConsumer (Data/Conduit/Internal/Fusion.hs:55)
    streamConduit (Data/Conduit/Internal/Fusion.hs:174)
    streamSource (Data/Conduit/Internal/Fusion.hs:180)
    streamSourcePure (Data/Conduit/Internal/Fusion.hs:198)
    unstream (Data/Conduit/Internal/Fusion.hs:57)
   0% (  0 / 41) in 'Data.Conduit.Internal.List.Stream'
  Missing documentation for:
    Module header
    unfoldS (Data/Conduit/Internal/List/Stream.hs:13)
    unfoldEitherS (Data/Conduit/Internal/List/Stream.hs:26)
    unfoldMS (Data/Conduit/Internal/List/Stream.hs:39)
    unfoldEitherMS (Data/Conduit/Internal/List/Stream.hs:53)
    sourceListS (Data/Conduit/Internal/List/Stream.hs:66)
    enumFromToS (Data/Conduit/Internal/List/Stream.hs:74)
    enumFromToS_int (Data/Conduit/Internal/List/Stream.hs:86)
    iterateS (Data/Conduit/Internal/List/Stream.hs:100)
    replicateS (Data/Conduit/Internal/List/Stream.hs:109)
    replicateMS (Data/Conduit/Internal/List/Stream.hs:118)
    foldS (Data/Conduit/Internal/List/Stream.hs:127)
    foldMS (Data/Conduit/Internal/List/Stream.hs:139)
    mapM_S (Data/Conduit/Internal/List/Stream.hs:153)
    dropS (Data/Conduit/Internal/List/Stream.hs:167)
    takeS (Data/Conduit/Internal/List/Stream.hs:182)
    headS (Data/Conduit/Internal/List/Stream.hs:197)
    mapS (Data/Conduit/Internal/List/Stream.hs:209)
    mapMS (Data/Conduit/Internal/List/Stream.hs:221)
    iterMS (Data/Conduit/Internal/List/Stream.hs:233)
    mapMaybeS (Data/Conduit/Internal/List/Stream.hs:245)
    mapMaybeMS (Data/Conduit/Internal/List/Stream.hs:260)
    catMaybesS (Data/Conduit/Internal/List/Stream.hs:276)
    concatS (Data/Conduit/Internal/List/Stream.hs:289)
    concatMapS (Data/Conduit/Internal/List/Stream.hs:302)
    concatMapMS (Data/Conduit/Internal/List/Stream.hs:315)
    concatMapAccumS (Data/Conduit/Internal/List/Stream.hs:330)
    mapAccumS (Data/Conduit/Internal/List/Stream.hs:345)
    mapAccumMS (Data/Conduit/Internal/List/Stream.hs:359)
    concatMapAccumMS (Data/Conduit/Internal/List/Stream.hs:373)
    mapFoldableS (Data/Conduit/Internal/List/Stream.hs:388)
    mapFoldableMS (Data/Conduit/Internal/List/Stream.hs:401)
    consumeS (Data/Conduit/Internal/List/Stream.hs:416)
    groupByS (Data/Conduit/Internal/List/Stream.hs:428)
    groupOn1S (Data/Conduit/Internal/List/Stream.hs:432)
    GroupByState (Data/Conduit/Internal/List/Stream.hs:436)
    groupBy1S (Data/Conduit/Internal/List/Stream.hs:441)
    isolateS (Data/Conduit/Internal/List/Stream.hs:462)
    filterS (Data/Conduit/Internal/List/Stream.hs:475)
    sinkNullS (Data/Conduit/Internal/List/Stream.hs:488)
    sourceNullS (Data/Conduit/Internal/List/Stream.hs:500)
 100% ( 80 / 80) in 'Data.Conduit'
  95% (107 /113) in 'Data.Conduit.Internal'
  Missing documentation for:
    Module header
    yieldM (Data/Conduit/Internal/Pipe.hs:261)
    enumFromTo (Data/Conduit/Internal/Pipe.hs:510)
    sourceToPipe (Data/Conduit/Internal/Conduit.hs:342)
    sinkToPipe (Data/Conduit/Internal/Conduit.hs:352)
    conduitToPipe (Data/Conduit/Internal/Conduit.hs:362)
  98% ( 47 / 48) in 'Data.Conduit.Lift'
  Missing documentation for:
    distribute (Data/Conduit/Lift.hs:125)
 100% ( 55 / 55) in 'Data.Conduit.List'
Documentation created:
.stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/doc/html/conduit/index.html,
.stack-work/dist/x86_64-linux-nopie/Cabal-2.0.1.0/doc/html/conduit/conduit.txt
Installing library in /home/mdronski/.stack/snapshots/x86_64-linux-nopie/lts-10.0/8.2.2/lib/x86_64-linux-ghc-8.2.2/conduit-1.2.12.1-FLnxUmc38QrA4uH7Dp5lmD
Registering library for conduit-1.2.12.1..
