
==================== FINAL INTERFACE ====================
2018-01-05 20:01:40.330144 UTC

interface projekt-0.1.0.0-Jjh2ddiGNrb2IxTA9KLrW9:NewModel 8022
  interface hash: 628d36cd63385de9a7091bba4eb70a2c
  ABI hash: 609cacb660f64d043a34e2aa652c2256
  export-list hash: e1b08e6424da0035e9590f01d440bc4a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 357164054848f7e1885c71f156bb20c5
  sig of: Nothing
  used TH splices: False
  where
exports:
  NewModel.hvec
  NewModel.hypothesis
  NewModel.matrixByVector
  NewModel.readToArray
  NewModel.sigmoid
  NewModel.vectorByVector
module dependencies: Counter
package dependencies: array-0.5.2.0 base-4.10.1.0 deepseq-1.4.3.0
                      directory-1.3.1.5 filepath-1.4.1.2 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 loop-0.3.0 matrix-0.3.5.0 primitive-0.6.2.0
                      random-1.1 time-1.8.0.2 transformers-0.5.2.0 unix-2.7.2.2
                      vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.2.0:Control.Monad.Primitive
                         primitive-0.6.2.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:Data.String 2224f2a50682577469081924dd1e46df
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Float 28e3bf9e258278ac8084e9cab43fd542
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  matrix-0.3.5.0:Data.Matrix 98a1a885472cee0ab45b4f2a51033c73
import  -/  Counter 533c03f6441a1aa5a30ee941358aaac5
  exports: e1ca87b51ef91e2d442099ba63056a7a
  convertToVec 3069fe9f2732b87c829e50978df00c25
import  -/  random-1.1:System.Random 7425ef878fcdaaac7b607c0c2d51fc7c
2d7a995675ea94ef928440468a278acc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   NewModel.$trModule3
                   NewModel.$trModule1) -}
c9952693d480d1863ada3632a41d370b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NewModel.$trModule2) -}
897e88425368f92caf2773c50edaa534
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewModel"#) -}
742e6b3b6e349901023f3d4e3395fcc8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NewModel.$trModule4) -}
98bb17dee81ca929561559374cfddf7d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("projekt-0.1.0.0-Jjh2ddiGNrb2IxTA9KLrW9"#) -}
c5b7e9cbfb6420864d83cfc030a99b9c
  hvec ::
    GHC.Float.Floating b =>
    Data.Matrix.Matrix b
    -> Data.Matrix.Matrix b -> Data.Matrix.Matrix b
  {- Arity: 3,
     Strictness: <L,U(U(U(C(C1(U)),A,C(C1(U)),C(U),A,A,C(U)),C(C1(U)),A,A),A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(SSLLLL),1*U(U,U,U,U,U,U(U,U,U))><S(SSSSSL),1*U(U,U,U,U,U,U(U,A,U))>m -}
28ff8c6f64a6f0736e4a781859caca56
  hypothesis ::
    GHC.Float.Floating a =>
    Data.Matrix.Matrix a -> Data.Matrix.Matrix a -> a
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LL)LLLLLLLLLLLLLLLLLLLLLL),U(U(U(C(C1(U)),A,C(C1(U)),C(U),A,A,C(U)),C(C1(U)),A,A),A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(U,U,U,U,U,U(U,U,U))><L,1*U(U,U,U,U,U,U(U,A,U))> -}
2283996663fa0145e257d798bdfce068
  matrixByVector :: GHC.Num.Num a => [[a]] -> [a] -> [a]
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),A,A,A,C(U))><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: [[a]])
                   (eta1 :: [a]) ->
                 letrec {
                   matrixByVector1 :: [[a]] -> [a] -> [a]
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [[a]]) (ds1 :: [a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : ipv ipv1
                       -> GHC.Types.:
                            @ a
                            (NewModel.vectorByVector @ a $dNum ipv ds1)
                            (matrixByVector1 ipv1 ds1) }
                 } in
                 matrixByVector1 eta eta1) -}
bf7eaa258e01460aba4c90c7bd69af75
  readToArray ::
    GHC.Real.Fractional a =>
    GHC.Types.IO
      (Data.Matrix.Matrix a, Data.Matrix.Matrix a, Data.Matrix.Matrix a)
  {- Arity: 2,
     Strictness: <L,U(1*U(A,A,A,A,A,A,C(U)),A,A,1*C1(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                NewModel.readToArray1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Real.Fractional a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(Data.Matrix.Matrix a, Data.Matrix.Matrix a,
                                 Data.Matrix.Matrix a)>_R)) -}
846d6a52ee42bb21c1e199989173536b
  readToArray1 ::
    GHC.Real.Fractional a =>
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Matrix.Matrix a, Data.Matrix.Matrix a,
           Data.Matrix.Matrix a) #)
  {- Arity: 2,
     Strictness: <L,U(1*U(A,A,A,A,A,A,C(U)),A,A,1*C1(U))><S,U> -}
092158bcb965d5303237b19bb14a1bc9
  sigmoid :: GHC.Float.Floating a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LL)LLLLLLLLLLLLLLLLLLLLLL),U(1*U(1*U(1*C1(C1(U)),A,A,1*C1(U),A,A,C(U)),1*C1(C1(U)),A,A),A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (eta :: a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 GHC.Real./
                   @ a
                   $dFractional
                   (GHC.Num.fromInteger @ a $dNum NewModel.sigmoid1)
                   (GHC.Num.+
                      @ a
                      $dNum
                      (GHC.Num.fromInteger @ a $dNum NewModel.sigmoid1)
                      (GHC.Float.exp @ a $dFloating (GHC.Num.negate @ a $dNum eta)))) -}
49a89e29a8745c0834530a82310086b9
  sigmoid1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
7c8b6084d7468364aaa2a1a1e393a499
  vectorByVector :: GHC.Num.Num p => [p] -> [p] -> p
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),A,A,A,1*C1(U))><S,U><L,U>,
     Unfolding: (\ @ p
                   ($dNum :: GHC.Num.Num p)
                   (eta :: [p])
                   (eta1 :: [p]) ->
                 let {
                   lvl48 :: p = GHC.Num.fromInteger @ p $dNum NewModel.vectorByVector1
                 } in
                 letrec {
                   vectorByVector2 :: [p] -> [p] -> p
                     {- Arity: 2, Strictness: <S,U><L,U> -}
                   = \ (ds :: [p]) (ds1 :: [p]) ->
                     let {
                       fail :: GHC.Prim.Void# -> p
                         <join 1> {- Arity: 1, Strictness: <L,A> -}
                       = \ (ds2 :: GHC.Prim.Void#)[OneShot] ->
                         GHC.Num.+
                           @ p
                           $dNum
                           (GHC.Num.*
                              @ p
                              $dNum
                              (case ds of wild { [] -> GHC.List.badHead @ p : x ds3 -> x })
                              (case ds1 of wild { [] -> GHC.List.badHead @ p : x ds3 -> x }))
                           (case ds of wild {
                              [] -> case GHC.List.scanl2 ret_ty p of {}
                              : ds3 xs
                              -> vectorByVector2
                                   xs
                                   (case ds1 of wild1 {
                                      [] -> GHC.List.scanl2 @ p : ds4 xs1 -> xs1 }) })
                     } in
                     case ds of wild {
                       []
                       -> case ds1 of wild1 {
                            [] -> lvl48 : ipv ipv1 -> fail GHC.Prim.void# }
                       : ipv ipv1 -> fail GHC.Prim.void# }
                 } in
                 vectorByVector2 eta eta1) -}
41c75fb3f278a7196b294844081f6a4d
  vectorByVector1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

